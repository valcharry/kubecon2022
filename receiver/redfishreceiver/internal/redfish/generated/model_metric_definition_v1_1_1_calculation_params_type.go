/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2020.4
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package redfish

import (
	"encoding/json"
)

// MetricDefinitionV111CalculationParamsType The usage of the parameter in the calculation.
type MetricDefinitionV111CalculationParamsType struct {
	// The link to a metric property that stores the result of the calculation.  If the link has wildcards, the wildcards are substituted as specified in the Wildcards array property.
	ResultMetric NullableString `json:"ResultMetric,omitempty"`
	// The metric property used as the input into the calculation.  If the link has wildcards, the wildcards are substituted as specified in the Wildcards array property.
	SourceMetric NullableString `json:"SourceMetric,omitempty"`
}

// NewMetricDefinitionV111CalculationParamsType instantiates a new MetricDefinitionV111CalculationParamsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricDefinitionV111CalculationParamsType() *MetricDefinitionV111CalculationParamsType {
	this := MetricDefinitionV111CalculationParamsType{}
	return &this
}

// NewMetricDefinitionV111CalculationParamsTypeWithDefaults instantiates a new MetricDefinitionV111CalculationParamsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricDefinitionV111CalculationParamsTypeWithDefaults() *MetricDefinitionV111CalculationParamsType {
	this := MetricDefinitionV111CalculationParamsType{}
	return &this
}

// GetResultMetric returns the ResultMetric field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetricDefinitionV111CalculationParamsType) GetResultMetric() string {
	if o == nil || o.ResultMetric.Get() == nil {
		var ret string
		return ret
	}
	return *o.ResultMetric.Get()
}

// GetResultMetricOk returns a tuple with the ResultMetric field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetricDefinitionV111CalculationParamsType) GetResultMetricOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ResultMetric.Get(), o.ResultMetric.IsSet()
}

// HasResultMetric returns a boolean if a field has been set.
func (o *MetricDefinitionV111CalculationParamsType) HasResultMetric() bool {
	if o != nil && o.ResultMetric.IsSet() {
		return true
	}

	return false
}

// SetResultMetric gets a reference to the given NullableString and assigns it to the ResultMetric field.
func (o *MetricDefinitionV111CalculationParamsType) SetResultMetric(v string) {
	o.ResultMetric.Set(&v)
}
// SetResultMetricNil sets the value for ResultMetric to be an explicit nil
func (o *MetricDefinitionV111CalculationParamsType) SetResultMetricNil() {
	o.ResultMetric.Set(nil)
}

// UnsetResultMetric ensures that no value is present for ResultMetric, not even an explicit nil
func (o *MetricDefinitionV111CalculationParamsType) UnsetResultMetric() {
	o.ResultMetric.Unset()
}

// GetSourceMetric returns the SourceMetric field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetricDefinitionV111CalculationParamsType) GetSourceMetric() string {
	if o == nil || o.SourceMetric.Get() == nil {
		var ret string
		return ret
	}
	return *o.SourceMetric.Get()
}

// GetSourceMetricOk returns a tuple with the SourceMetric field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetricDefinitionV111CalculationParamsType) GetSourceMetricOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SourceMetric.Get(), o.SourceMetric.IsSet()
}

// HasSourceMetric returns a boolean if a field has been set.
func (o *MetricDefinitionV111CalculationParamsType) HasSourceMetric() bool {
	if o != nil && o.SourceMetric.IsSet() {
		return true
	}

	return false
}

// SetSourceMetric gets a reference to the given NullableString and assigns it to the SourceMetric field.
func (o *MetricDefinitionV111CalculationParamsType) SetSourceMetric(v string) {
	o.SourceMetric.Set(&v)
}
// SetSourceMetricNil sets the value for SourceMetric to be an explicit nil
func (o *MetricDefinitionV111CalculationParamsType) SetSourceMetricNil() {
	o.SourceMetric.Set(nil)
}

// UnsetSourceMetric ensures that no value is present for SourceMetric, not even an explicit nil
func (o *MetricDefinitionV111CalculationParamsType) UnsetSourceMetric() {
	o.SourceMetric.Unset()
}

func (o MetricDefinitionV111CalculationParamsType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ResultMetric.IsSet() {
		toSerialize["ResultMetric"] = o.ResultMetric.Get()
	}
	if o.SourceMetric.IsSet() {
		toSerialize["SourceMetric"] = o.SourceMetric.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableMetricDefinitionV111CalculationParamsType struct {
	value *MetricDefinitionV111CalculationParamsType
	isSet bool
}

func (v NullableMetricDefinitionV111CalculationParamsType) Get() *MetricDefinitionV111CalculationParamsType {
	return v.value
}

func (v *NullableMetricDefinitionV111CalculationParamsType) Set(val *MetricDefinitionV111CalculationParamsType) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricDefinitionV111CalculationParamsType) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricDefinitionV111CalculationParamsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricDefinitionV111CalculationParamsType(val *MetricDefinitionV111CalculationParamsType) *NullableMetricDefinitionV111CalculationParamsType {
	return &NullableMetricDefinitionV111CalculationParamsType{value: val, isSet: true}
}

func (v NullableMetricDefinitionV111CalculationParamsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricDefinitionV111CalculationParamsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


