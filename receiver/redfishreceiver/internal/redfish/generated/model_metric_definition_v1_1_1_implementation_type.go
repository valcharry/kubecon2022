/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2020.4
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package redfish

import (
	"encoding/json"
	"fmt"
)

// MetricDefinitionV111ImplementationType the model 'MetricDefinitionV111ImplementationType'
type MetricDefinitionV111ImplementationType string

// List of MetricDefinition_v1_1_1_ImplementationType
const (
	METRICDEFINITIONV111IMPLEMENTATIONTYPE_PHYSICAL_SENSOR MetricDefinitionV111ImplementationType = "PhysicalSensor"
	METRICDEFINITIONV111IMPLEMENTATIONTYPE_CALCULATED MetricDefinitionV111ImplementationType = "Calculated"
	METRICDEFINITIONV111IMPLEMENTATIONTYPE_SYNTHESIZED MetricDefinitionV111ImplementationType = "Synthesized"
	METRICDEFINITIONV111IMPLEMENTATIONTYPE_DIGITAL_METER MetricDefinitionV111ImplementationType = "DigitalMeter"
)

func (v *MetricDefinitionV111ImplementationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MetricDefinitionV111ImplementationType(value)
	for _, existing := range []MetricDefinitionV111ImplementationType{ "PhysicalSensor", "Calculated", "Synthesized", "DigitalMeter",   } {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MetricDefinitionV111ImplementationType", value)
}

// Ptr returns reference to MetricDefinition_v1_1_1_ImplementationType value
func (v MetricDefinitionV111ImplementationType) Ptr() *MetricDefinitionV111ImplementationType {
	return &v
}

type NullableMetricDefinitionV111ImplementationType struct {
	value *MetricDefinitionV111ImplementationType
	isSet bool
}

func (v NullableMetricDefinitionV111ImplementationType) Get() *MetricDefinitionV111ImplementationType {
	return v.value
}

func (v *NullableMetricDefinitionV111ImplementationType) Set(val *MetricDefinitionV111ImplementationType) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricDefinitionV111ImplementationType) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricDefinitionV111ImplementationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricDefinitionV111ImplementationType(val *MetricDefinitionV111ImplementationType) *NullableMetricDefinitionV111ImplementationType {
	return &NullableMetricDefinitionV111ImplementationType{value: val, isSet: true}
}

func (v NullableMetricDefinitionV111ImplementationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricDefinitionV111ImplementationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

