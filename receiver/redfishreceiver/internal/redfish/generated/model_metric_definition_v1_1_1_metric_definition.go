/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2020.4
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package redfish

import (
	"encoding/json"
)

// MetricDefinitionV111MetricDefinition The MetricDefinition schema describes the metadata information for a metric.
type MetricDefinitionV111MetricDefinition struct {
	// The OData description of a payload.
	OdataContext *string `json:"@odata.context,omitempty"`
	// The current ETag of the resource.
	OdataEtag *string `json:"@odata.etag,omitempty"`
	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`
	// The type of a resource.
	OdataType string `json:"@odata.type"`
	// The estimated percent error of measured versus actual values.
	Accuracy NullableFloat32 `json:"Accuracy,omitempty"`
	Actions *MetricDefinitionV111Actions `json:"Actions,omitempty"`
	Calculable *MetricDefinitionV111Calculable `json:"Calculable,omitempty"`
	CalculationAlgorithm *MetricDefinitionV111CalculationAlgorithmEnum `json:"CalculationAlgorithm,omitempty"`
	// The metric properties that are part of a calculation.
	CalculationParameters *[]MetricDefinitionV111CalculationParamsType `json:"CalculationParameters,omitempty"`
	// The time interval over which the metric calculation is performed.
	CalculationTimeInterval NullableString `json:"CalculationTimeInterval,omitempty"`
	// The calibration offset added to the metric reading.
	Calibration NullableFloat32 `json:"Calibration,omitempty"`
	// The description of this resource.  Used for commonality in the schema definitions.
	Description *string `json:"Description,omitempty"`
	// This array property specifies possible values of a discrete metric.
	DiscreteValues *[]string `json:"DiscreteValues,omitempty"`
	// The identifier that uniquely identifies the resource within the collection of similar resources.
	Id string `json:"Id"`
	Implementation *MetricDefinitionV111ImplementationType `json:"Implementation,omitempty"`
	// An indication of whether the metric values are linear versus non-linear.
	IsLinear NullableBool `json:"IsLinear,omitempty"`
	// Maximum value for metric reading.
	MaxReadingRange NullableFloat32 `json:"MaxReadingRange,omitempty"`
	MetricDataType *MetricDefinitionV111MetricDataType `json:"MetricDataType,omitempty"`
	// The list of URIs with wildcards and property identifiers that this metric definition defines.  If a URI has wildcards, the wildcards are substituted as specified in the Wildcards array property.
	MetricProperties *[]string `json:"MetricProperties,omitempty"`
	MetricType *MetricDefinitionV111MetricType `json:"MetricType,omitempty"`
	// Minimum value for metric reading.
	MinReadingRange NullableFloat32 `json:"MinReadingRange,omitempty"`
	// The name of the resource or array member.
	Name string `json:"Name"`
	// The OEM-defined calculation that is performed on a source metric to obtain the metric being defined.
	OEMCalculationAlgorithm NullableString `json:"OEMCalculationAlgorithm,omitempty"`
	// The OEM extension.
	Oem *map[string]map[string]interface{} `json:"Oem,omitempty"`
	PhysicalContext *PhysicalContextPhysicalContext `json:"PhysicalContext,omitempty"`
	// Number of significant digits in the metric reading.
	Precision NullableInt64 `json:"Precision,omitempty"`
	// The time interval between when a metric is updated.
	SensingInterval NullableString `json:"SensingInterval,omitempty"`
	// The accuracy of the timestamp.
	TimestampAccuracy NullableString `json:"TimestampAccuracy,omitempty"`
	// The units of measure for this metric.
	Units NullableString `json:"Units,omitempty"`
	// The wildcards and their substitution values for the entries in the MetricProperties array property.
	Wildcards *[]MetricDefinitionV111Wildcard `json:"Wildcards,omitempty"`
}

// NewMetricDefinitionV111MetricDefinition instantiates a new MetricDefinitionV111MetricDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricDefinitionV111MetricDefinition(odataId string, odataType string, id string, name string, ) *MetricDefinitionV111MetricDefinition {
	this := MetricDefinitionV111MetricDefinition{}
	this.OdataId = odataId
	this.OdataType = odataType
	this.Id = id
	this.Name = name
	return &this
}

// NewMetricDefinitionV111MetricDefinitionWithDefaults instantiates a new MetricDefinitionV111MetricDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricDefinitionV111MetricDefinitionWithDefaults() *MetricDefinitionV111MetricDefinition {
	this := MetricDefinitionV111MetricDefinition{}
	return &this
}

// GetOdataContext returns the OdataContext field value if set, zero value otherwise.
func (o *MetricDefinitionV111MetricDefinition) GetOdataContext() string {
	if o == nil || o.OdataContext == nil {
		var ret string
		return ret
	}
	return *o.OdataContext
}

// GetOdataContextOk returns a tuple with the OdataContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricDefinitionV111MetricDefinition) GetOdataContextOk() (*string, bool) {
	if o == nil || o.OdataContext == nil {
		return nil, false
	}
	return o.OdataContext, true
}

// HasOdataContext returns a boolean if a field has been set.
func (o *MetricDefinitionV111MetricDefinition) HasOdataContext() bool {
	if o != nil && o.OdataContext != nil {
		return true
	}

	return false
}

// SetOdataContext gets a reference to the given string and assigns it to the OdataContext field.
func (o *MetricDefinitionV111MetricDefinition) SetOdataContext(v string) {
	o.OdataContext = &v
}

// GetOdataEtag returns the OdataEtag field value if set, zero value otherwise.
func (o *MetricDefinitionV111MetricDefinition) GetOdataEtag() string {
	if o == nil || o.OdataEtag == nil {
		var ret string
		return ret
	}
	return *o.OdataEtag
}

// GetOdataEtagOk returns a tuple with the OdataEtag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricDefinitionV111MetricDefinition) GetOdataEtagOk() (*string, bool) {
	if o == nil || o.OdataEtag == nil {
		return nil, false
	}
	return o.OdataEtag, true
}

// HasOdataEtag returns a boolean if a field has been set.
func (o *MetricDefinitionV111MetricDefinition) HasOdataEtag() bool {
	if o != nil && o.OdataEtag != nil {
		return true
	}

	return false
}

// SetOdataEtag gets a reference to the given string and assigns it to the OdataEtag field.
func (o *MetricDefinitionV111MetricDefinition) SetOdataEtag(v string) {
	o.OdataEtag = &v
}

// GetOdataId returns the OdataId field value
func (o *MetricDefinitionV111MetricDefinition) GetOdataId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.OdataId
}

// GetOdataIdOk returns a tuple with the OdataId field value
// and a boolean to check if the value has been set.
func (o *MetricDefinitionV111MetricDefinition) GetOdataIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.OdataId, true
}

// SetOdataId sets field value
func (o *MetricDefinitionV111MetricDefinition) SetOdataId(v string) {
	o.OdataId = v
}

// GetOdataType returns the OdataType field value
func (o *MetricDefinitionV111MetricDefinition) GetOdataType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.OdataType
}

// GetOdataTypeOk returns a tuple with the OdataType field value
// and a boolean to check if the value has been set.
func (o *MetricDefinitionV111MetricDefinition) GetOdataTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.OdataType, true
}

// SetOdataType sets field value
func (o *MetricDefinitionV111MetricDefinition) SetOdataType(v string) {
	o.OdataType = v
}

// GetAccuracy returns the Accuracy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetricDefinitionV111MetricDefinition) GetAccuracy() float32 {
	if o == nil || o.Accuracy.Get() == nil {
		var ret float32
		return ret
	}
	return *o.Accuracy.Get()
}

// GetAccuracyOk returns a tuple with the Accuracy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetricDefinitionV111MetricDefinition) GetAccuracyOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Accuracy.Get(), o.Accuracy.IsSet()
}

// HasAccuracy returns a boolean if a field has been set.
func (o *MetricDefinitionV111MetricDefinition) HasAccuracy() bool {
	if o != nil && o.Accuracy.IsSet() {
		return true
	}

	return false
}

// SetAccuracy gets a reference to the given NullableFloat32 and assigns it to the Accuracy field.
func (o *MetricDefinitionV111MetricDefinition) SetAccuracy(v float32) {
	o.Accuracy.Set(&v)
}
// SetAccuracyNil sets the value for Accuracy to be an explicit nil
func (o *MetricDefinitionV111MetricDefinition) SetAccuracyNil() {
	o.Accuracy.Set(nil)
}

// UnsetAccuracy ensures that no value is present for Accuracy, not even an explicit nil
func (o *MetricDefinitionV111MetricDefinition) UnsetAccuracy() {
	o.Accuracy.Unset()
}

// GetActions returns the Actions field value if set, zero value otherwise.
func (o *MetricDefinitionV111MetricDefinition) GetActions() MetricDefinitionV111Actions {
	if o == nil || o.Actions == nil {
		var ret MetricDefinitionV111Actions
		return ret
	}
	return *o.Actions
}

// GetActionsOk returns a tuple with the Actions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricDefinitionV111MetricDefinition) GetActionsOk() (*MetricDefinitionV111Actions, bool) {
	if o == nil || o.Actions == nil {
		return nil, false
	}
	return o.Actions, true
}

// HasActions returns a boolean if a field has been set.
func (o *MetricDefinitionV111MetricDefinition) HasActions() bool {
	if o != nil && o.Actions != nil {
		return true
	}

	return false
}

// SetActions gets a reference to the given MetricDefinitionV111Actions and assigns it to the Actions field.
func (o *MetricDefinitionV111MetricDefinition) SetActions(v MetricDefinitionV111Actions) {
	o.Actions = &v
}

// GetCalculable returns the Calculable field value if set, zero value otherwise.
func (o *MetricDefinitionV111MetricDefinition) GetCalculable() MetricDefinitionV111Calculable {
	if o == nil || o.Calculable == nil {
		var ret MetricDefinitionV111Calculable
		return ret
	}
	return *o.Calculable
}

// GetCalculableOk returns a tuple with the Calculable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricDefinitionV111MetricDefinition) GetCalculableOk() (*MetricDefinitionV111Calculable, bool) {
	if o == nil || o.Calculable == nil {
		return nil, false
	}
	return o.Calculable, true
}

// HasCalculable returns a boolean if a field has been set.
func (o *MetricDefinitionV111MetricDefinition) HasCalculable() bool {
	if o != nil && o.Calculable != nil {
		return true
	}

	return false
}

// SetCalculable gets a reference to the given MetricDefinitionV111Calculable and assigns it to the Calculable field.
func (o *MetricDefinitionV111MetricDefinition) SetCalculable(v MetricDefinitionV111Calculable) {
	o.Calculable = &v
}

// GetCalculationAlgorithm returns the CalculationAlgorithm field value if set, zero value otherwise.
func (o *MetricDefinitionV111MetricDefinition) GetCalculationAlgorithm() MetricDefinitionV111CalculationAlgorithmEnum {
	if o == nil || o.CalculationAlgorithm == nil {
		var ret MetricDefinitionV111CalculationAlgorithmEnum
		return ret
	}
	return *o.CalculationAlgorithm
}

// GetCalculationAlgorithmOk returns a tuple with the CalculationAlgorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricDefinitionV111MetricDefinition) GetCalculationAlgorithmOk() (*MetricDefinitionV111CalculationAlgorithmEnum, bool) {
	if o == nil || o.CalculationAlgorithm == nil {
		return nil, false
	}
	return o.CalculationAlgorithm, true
}

// HasCalculationAlgorithm returns a boolean if a field has been set.
func (o *MetricDefinitionV111MetricDefinition) HasCalculationAlgorithm() bool {
	if o != nil && o.CalculationAlgorithm != nil {
		return true
	}

	return false
}

// SetCalculationAlgorithm gets a reference to the given MetricDefinitionV111CalculationAlgorithmEnum and assigns it to the CalculationAlgorithm field.
func (o *MetricDefinitionV111MetricDefinition) SetCalculationAlgorithm(v MetricDefinitionV111CalculationAlgorithmEnum) {
	o.CalculationAlgorithm = &v
}

// GetCalculationParameters returns the CalculationParameters field value if set, zero value otherwise.
func (o *MetricDefinitionV111MetricDefinition) GetCalculationParameters() []MetricDefinitionV111CalculationParamsType {
	if o == nil || o.CalculationParameters == nil {
		var ret []MetricDefinitionV111CalculationParamsType
		return ret
	}
	return *o.CalculationParameters
}

// GetCalculationParametersOk returns a tuple with the CalculationParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricDefinitionV111MetricDefinition) GetCalculationParametersOk() (*[]MetricDefinitionV111CalculationParamsType, bool) {
	if o == nil || o.CalculationParameters == nil {
		return nil, false
	}
	return o.CalculationParameters, true
}

// HasCalculationParameters returns a boolean if a field has been set.
func (o *MetricDefinitionV111MetricDefinition) HasCalculationParameters() bool {
	if o != nil && o.CalculationParameters != nil {
		return true
	}

	return false
}

// SetCalculationParameters gets a reference to the given []MetricDefinitionV111CalculationParamsType and assigns it to the CalculationParameters field.
func (o *MetricDefinitionV111MetricDefinition) SetCalculationParameters(v []MetricDefinitionV111CalculationParamsType) {
	o.CalculationParameters = &v
}

// GetCalculationTimeInterval returns the CalculationTimeInterval field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetricDefinitionV111MetricDefinition) GetCalculationTimeInterval() string {
	if o == nil || o.CalculationTimeInterval.Get() == nil {
		var ret string
		return ret
	}
	return *o.CalculationTimeInterval.Get()
}

// GetCalculationTimeIntervalOk returns a tuple with the CalculationTimeInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetricDefinitionV111MetricDefinition) GetCalculationTimeIntervalOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CalculationTimeInterval.Get(), o.CalculationTimeInterval.IsSet()
}

// HasCalculationTimeInterval returns a boolean if a field has been set.
func (o *MetricDefinitionV111MetricDefinition) HasCalculationTimeInterval() bool {
	if o != nil && o.CalculationTimeInterval.IsSet() {
		return true
	}

	return false
}

// SetCalculationTimeInterval gets a reference to the given NullableString and assigns it to the CalculationTimeInterval field.
func (o *MetricDefinitionV111MetricDefinition) SetCalculationTimeInterval(v string) {
	o.CalculationTimeInterval.Set(&v)
}
// SetCalculationTimeIntervalNil sets the value for CalculationTimeInterval to be an explicit nil
func (o *MetricDefinitionV111MetricDefinition) SetCalculationTimeIntervalNil() {
	o.CalculationTimeInterval.Set(nil)
}

// UnsetCalculationTimeInterval ensures that no value is present for CalculationTimeInterval, not even an explicit nil
func (o *MetricDefinitionV111MetricDefinition) UnsetCalculationTimeInterval() {
	o.CalculationTimeInterval.Unset()
}

// GetCalibration returns the Calibration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetricDefinitionV111MetricDefinition) GetCalibration() float32 {
	if o == nil || o.Calibration.Get() == nil {
		var ret float32
		return ret
	}
	return *o.Calibration.Get()
}

// GetCalibrationOk returns a tuple with the Calibration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetricDefinitionV111MetricDefinition) GetCalibrationOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Calibration.Get(), o.Calibration.IsSet()
}

// HasCalibration returns a boolean if a field has been set.
func (o *MetricDefinitionV111MetricDefinition) HasCalibration() bool {
	if o != nil && o.Calibration.IsSet() {
		return true
	}

	return false
}

// SetCalibration gets a reference to the given NullableFloat32 and assigns it to the Calibration field.
func (o *MetricDefinitionV111MetricDefinition) SetCalibration(v float32) {
	o.Calibration.Set(&v)
}
// SetCalibrationNil sets the value for Calibration to be an explicit nil
func (o *MetricDefinitionV111MetricDefinition) SetCalibrationNil() {
	o.Calibration.Set(nil)
}

// UnsetCalibration ensures that no value is present for Calibration, not even an explicit nil
func (o *MetricDefinitionV111MetricDefinition) UnsetCalibration() {
	o.Calibration.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *MetricDefinitionV111MetricDefinition) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricDefinitionV111MetricDefinition) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *MetricDefinitionV111MetricDefinition) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *MetricDefinitionV111MetricDefinition) SetDescription(v string) {
	o.Description = &v
}

// GetDiscreteValues returns the DiscreteValues field value if set, zero value otherwise.
func (o *MetricDefinitionV111MetricDefinition) GetDiscreteValues() []string {
	if o == nil || o.DiscreteValues == nil {
		var ret []string
		return ret
	}
	return *o.DiscreteValues
}

// GetDiscreteValuesOk returns a tuple with the DiscreteValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricDefinitionV111MetricDefinition) GetDiscreteValuesOk() (*[]string, bool) {
	if o == nil || o.DiscreteValues == nil {
		return nil, false
	}
	return o.DiscreteValues, true
}

// HasDiscreteValues returns a boolean if a field has been set.
func (o *MetricDefinitionV111MetricDefinition) HasDiscreteValues() bool {
	if o != nil && o.DiscreteValues != nil {
		return true
	}

	return false
}

// SetDiscreteValues gets a reference to the given []string and assigns it to the DiscreteValues field.
func (o *MetricDefinitionV111MetricDefinition) SetDiscreteValues(v []string) {
	o.DiscreteValues = &v
}

// GetId returns the Id field value
func (o *MetricDefinitionV111MetricDefinition) GetId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *MetricDefinitionV111MetricDefinition) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *MetricDefinitionV111MetricDefinition) SetId(v string) {
	o.Id = v
}

// GetImplementation returns the Implementation field value if set, zero value otherwise.
func (o *MetricDefinitionV111MetricDefinition) GetImplementation() MetricDefinitionV111ImplementationType {
	if o == nil || o.Implementation == nil {
		var ret MetricDefinitionV111ImplementationType
		return ret
	}
	return *o.Implementation
}

// GetImplementationOk returns a tuple with the Implementation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricDefinitionV111MetricDefinition) GetImplementationOk() (*MetricDefinitionV111ImplementationType, bool) {
	if o == nil || o.Implementation == nil {
		return nil, false
	}
	return o.Implementation, true
}

// HasImplementation returns a boolean if a field has been set.
func (o *MetricDefinitionV111MetricDefinition) HasImplementation() bool {
	if o != nil && o.Implementation != nil {
		return true
	}

	return false
}

// SetImplementation gets a reference to the given MetricDefinitionV111ImplementationType and assigns it to the Implementation field.
func (o *MetricDefinitionV111MetricDefinition) SetImplementation(v MetricDefinitionV111ImplementationType) {
	o.Implementation = &v
}

// GetIsLinear returns the IsLinear field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetricDefinitionV111MetricDefinition) GetIsLinear() bool {
	if o == nil || o.IsLinear.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsLinear.Get()
}

// GetIsLinearOk returns a tuple with the IsLinear field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetricDefinitionV111MetricDefinition) GetIsLinearOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsLinear.Get(), o.IsLinear.IsSet()
}

// HasIsLinear returns a boolean if a field has been set.
func (o *MetricDefinitionV111MetricDefinition) HasIsLinear() bool {
	if o != nil && o.IsLinear.IsSet() {
		return true
	}

	return false
}

// SetIsLinear gets a reference to the given NullableBool and assigns it to the IsLinear field.
func (o *MetricDefinitionV111MetricDefinition) SetIsLinear(v bool) {
	o.IsLinear.Set(&v)
}
// SetIsLinearNil sets the value for IsLinear to be an explicit nil
func (o *MetricDefinitionV111MetricDefinition) SetIsLinearNil() {
	o.IsLinear.Set(nil)
}

// UnsetIsLinear ensures that no value is present for IsLinear, not even an explicit nil
func (o *MetricDefinitionV111MetricDefinition) UnsetIsLinear() {
	o.IsLinear.Unset()
}

// GetMaxReadingRange returns the MaxReadingRange field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetricDefinitionV111MetricDefinition) GetMaxReadingRange() float32 {
	if o == nil || o.MaxReadingRange.Get() == nil {
		var ret float32
		return ret
	}
	return *o.MaxReadingRange.Get()
}

// GetMaxReadingRangeOk returns a tuple with the MaxReadingRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetricDefinitionV111MetricDefinition) GetMaxReadingRangeOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MaxReadingRange.Get(), o.MaxReadingRange.IsSet()
}

// HasMaxReadingRange returns a boolean if a field has been set.
func (o *MetricDefinitionV111MetricDefinition) HasMaxReadingRange() bool {
	if o != nil && o.MaxReadingRange.IsSet() {
		return true
	}

	return false
}

// SetMaxReadingRange gets a reference to the given NullableFloat32 and assigns it to the MaxReadingRange field.
func (o *MetricDefinitionV111MetricDefinition) SetMaxReadingRange(v float32) {
	o.MaxReadingRange.Set(&v)
}
// SetMaxReadingRangeNil sets the value for MaxReadingRange to be an explicit nil
func (o *MetricDefinitionV111MetricDefinition) SetMaxReadingRangeNil() {
	o.MaxReadingRange.Set(nil)
}

// UnsetMaxReadingRange ensures that no value is present for MaxReadingRange, not even an explicit nil
func (o *MetricDefinitionV111MetricDefinition) UnsetMaxReadingRange() {
	o.MaxReadingRange.Unset()
}

// GetMetricDataType returns the MetricDataType field value if set, zero value otherwise.
func (o *MetricDefinitionV111MetricDefinition) GetMetricDataType() MetricDefinitionV111MetricDataType {
	if o == nil || o.MetricDataType == nil {
		var ret MetricDefinitionV111MetricDataType
		return ret
	}
	return *o.MetricDataType
}

// GetMetricDataTypeOk returns a tuple with the MetricDataType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricDefinitionV111MetricDefinition) GetMetricDataTypeOk() (*MetricDefinitionV111MetricDataType, bool) {
	if o == nil || o.MetricDataType == nil {
		return nil, false
	}
	return o.MetricDataType, true
}

// HasMetricDataType returns a boolean if a field has been set.
func (o *MetricDefinitionV111MetricDefinition) HasMetricDataType() bool {
	if o != nil && o.MetricDataType != nil {
		return true
	}

	return false
}

// SetMetricDataType gets a reference to the given MetricDefinitionV111MetricDataType and assigns it to the MetricDataType field.
func (o *MetricDefinitionV111MetricDefinition) SetMetricDataType(v MetricDefinitionV111MetricDataType) {
	o.MetricDataType = &v
}

// GetMetricProperties returns the MetricProperties field value if set, zero value otherwise.
func (o *MetricDefinitionV111MetricDefinition) GetMetricProperties() []string {
	if o == nil || o.MetricProperties == nil {
		var ret []string
		return ret
	}
	return *o.MetricProperties
}

// GetMetricPropertiesOk returns a tuple with the MetricProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricDefinitionV111MetricDefinition) GetMetricPropertiesOk() (*[]string, bool) {
	if o == nil || o.MetricProperties == nil {
		return nil, false
	}
	return o.MetricProperties, true
}

// HasMetricProperties returns a boolean if a field has been set.
func (o *MetricDefinitionV111MetricDefinition) HasMetricProperties() bool {
	if o != nil && o.MetricProperties != nil {
		return true
	}

	return false
}

// SetMetricProperties gets a reference to the given []string and assigns it to the MetricProperties field.
func (o *MetricDefinitionV111MetricDefinition) SetMetricProperties(v []string) {
	o.MetricProperties = &v
}

// GetMetricType returns the MetricType field value if set, zero value otherwise.
func (o *MetricDefinitionV111MetricDefinition) GetMetricType() MetricDefinitionV111MetricType {
	if o == nil || o.MetricType == nil {
		var ret MetricDefinitionV111MetricType
		return ret
	}
	return *o.MetricType
}

// GetMetricTypeOk returns a tuple with the MetricType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricDefinitionV111MetricDefinition) GetMetricTypeOk() (*MetricDefinitionV111MetricType, bool) {
	if o == nil || o.MetricType == nil {
		return nil, false
	}
	return o.MetricType, true
}

// HasMetricType returns a boolean if a field has been set.
func (o *MetricDefinitionV111MetricDefinition) HasMetricType() bool {
	if o != nil && o.MetricType != nil {
		return true
	}

	return false
}

// SetMetricType gets a reference to the given MetricDefinitionV111MetricType and assigns it to the MetricType field.
func (o *MetricDefinitionV111MetricDefinition) SetMetricType(v MetricDefinitionV111MetricType) {
	o.MetricType = &v
}

// GetMinReadingRange returns the MinReadingRange field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetricDefinitionV111MetricDefinition) GetMinReadingRange() float32 {
	if o == nil || o.MinReadingRange.Get() == nil {
		var ret float32
		return ret
	}
	return *o.MinReadingRange.Get()
}

// GetMinReadingRangeOk returns a tuple with the MinReadingRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetricDefinitionV111MetricDefinition) GetMinReadingRangeOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MinReadingRange.Get(), o.MinReadingRange.IsSet()
}

// HasMinReadingRange returns a boolean if a field has been set.
func (o *MetricDefinitionV111MetricDefinition) HasMinReadingRange() bool {
	if o != nil && o.MinReadingRange.IsSet() {
		return true
	}

	return false
}

// SetMinReadingRange gets a reference to the given NullableFloat32 and assigns it to the MinReadingRange field.
func (o *MetricDefinitionV111MetricDefinition) SetMinReadingRange(v float32) {
	o.MinReadingRange.Set(&v)
}
// SetMinReadingRangeNil sets the value for MinReadingRange to be an explicit nil
func (o *MetricDefinitionV111MetricDefinition) SetMinReadingRangeNil() {
	o.MinReadingRange.Set(nil)
}

// UnsetMinReadingRange ensures that no value is present for MinReadingRange, not even an explicit nil
func (o *MetricDefinitionV111MetricDefinition) UnsetMinReadingRange() {
	o.MinReadingRange.Unset()
}

// GetName returns the Name field value
func (o *MetricDefinitionV111MetricDefinition) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MetricDefinitionV111MetricDefinition) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MetricDefinitionV111MetricDefinition) SetName(v string) {
	o.Name = v
}

// GetOEMCalculationAlgorithm returns the OEMCalculationAlgorithm field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetricDefinitionV111MetricDefinition) GetOEMCalculationAlgorithm() string {
	if o == nil || o.OEMCalculationAlgorithm.Get() == nil {
		var ret string
		return ret
	}
	return *o.OEMCalculationAlgorithm.Get()
}

// GetOEMCalculationAlgorithmOk returns a tuple with the OEMCalculationAlgorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetricDefinitionV111MetricDefinition) GetOEMCalculationAlgorithmOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OEMCalculationAlgorithm.Get(), o.OEMCalculationAlgorithm.IsSet()
}

// HasOEMCalculationAlgorithm returns a boolean if a field has been set.
func (o *MetricDefinitionV111MetricDefinition) HasOEMCalculationAlgorithm() bool {
	if o != nil && o.OEMCalculationAlgorithm.IsSet() {
		return true
	}

	return false
}

// SetOEMCalculationAlgorithm gets a reference to the given NullableString and assigns it to the OEMCalculationAlgorithm field.
func (o *MetricDefinitionV111MetricDefinition) SetOEMCalculationAlgorithm(v string) {
	o.OEMCalculationAlgorithm.Set(&v)
}
// SetOEMCalculationAlgorithmNil sets the value for OEMCalculationAlgorithm to be an explicit nil
func (o *MetricDefinitionV111MetricDefinition) SetOEMCalculationAlgorithmNil() {
	o.OEMCalculationAlgorithm.Set(nil)
}

// UnsetOEMCalculationAlgorithm ensures that no value is present for OEMCalculationAlgorithm, not even an explicit nil
func (o *MetricDefinitionV111MetricDefinition) UnsetOEMCalculationAlgorithm() {
	o.OEMCalculationAlgorithm.Unset()
}

// GetOem returns the Oem field value if set, zero value otherwise.
func (o *MetricDefinitionV111MetricDefinition) GetOem() map[string]map[string]interface{} {
	if o == nil || o.Oem == nil {
		var ret map[string]map[string]interface{}
		return ret
	}
	return *o.Oem
}

// GetOemOk returns a tuple with the Oem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricDefinitionV111MetricDefinition) GetOemOk() (*map[string]map[string]interface{}, bool) {
	if o == nil || o.Oem == nil {
		return nil, false
	}
	return o.Oem, true
}

// HasOem returns a boolean if a field has been set.
func (o *MetricDefinitionV111MetricDefinition) HasOem() bool {
	if o != nil && o.Oem != nil {
		return true
	}

	return false
}

// SetOem gets a reference to the given map[string]map[string]interface{} and assigns it to the Oem field.
func (o *MetricDefinitionV111MetricDefinition) SetOem(v map[string]map[string]interface{}) {
	o.Oem = &v
}

// GetPhysicalContext returns the PhysicalContext field value if set, zero value otherwise.
func (o *MetricDefinitionV111MetricDefinition) GetPhysicalContext() PhysicalContextPhysicalContext {
	if o == nil || o.PhysicalContext == nil {
		var ret PhysicalContextPhysicalContext
		return ret
	}
	return *o.PhysicalContext
}

// GetPhysicalContextOk returns a tuple with the PhysicalContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricDefinitionV111MetricDefinition) GetPhysicalContextOk() (*PhysicalContextPhysicalContext, bool) {
	if o == nil || o.PhysicalContext == nil {
		return nil, false
	}
	return o.PhysicalContext, true
}

// HasPhysicalContext returns a boolean if a field has been set.
func (o *MetricDefinitionV111MetricDefinition) HasPhysicalContext() bool {
	if o != nil && o.PhysicalContext != nil {
		return true
	}

	return false
}

// SetPhysicalContext gets a reference to the given PhysicalContextPhysicalContext and assigns it to the PhysicalContext field.
func (o *MetricDefinitionV111MetricDefinition) SetPhysicalContext(v PhysicalContextPhysicalContext) {
	o.PhysicalContext = &v
}

// GetPrecision returns the Precision field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetricDefinitionV111MetricDefinition) GetPrecision() int64 {
	if o == nil || o.Precision.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Precision.Get()
}

// GetPrecisionOk returns a tuple with the Precision field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetricDefinitionV111MetricDefinition) GetPrecisionOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Precision.Get(), o.Precision.IsSet()
}

// HasPrecision returns a boolean if a field has been set.
func (o *MetricDefinitionV111MetricDefinition) HasPrecision() bool {
	if o != nil && o.Precision.IsSet() {
		return true
	}

	return false
}

// SetPrecision gets a reference to the given NullableInt64 and assigns it to the Precision field.
func (o *MetricDefinitionV111MetricDefinition) SetPrecision(v int64) {
	o.Precision.Set(&v)
}
// SetPrecisionNil sets the value for Precision to be an explicit nil
func (o *MetricDefinitionV111MetricDefinition) SetPrecisionNil() {
	o.Precision.Set(nil)
}

// UnsetPrecision ensures that no value is present for Precision, not even an explicit nil
func (o *MetricDefinitionV111MetricDefinition) UnsetPrecision() {
	o.Precision.Unset()
}

// GetSensingInterval returns the SensingInterval field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetricDefinitionV111MetricDefinition) GetSensingInterval() string {
	if o == nil || o.SensingInterval.Get() == nil {
		var ret string
		return ret
	}
	return *o.SensingInterval.Get()
}

// GetSensingIntervalOk returns a tuple with the SensingInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetricDefinitionV111MetricDefinition) GetSensingIntervalOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SensingInterval.Get(), o.SensingInterval.IsSet()
}

// HasSensingInterval returns a boolean if a field has been set.
func (o *MetricDefinitionV111MetricDefinition) HasSensingInterval() bool {
	if o != nil && o.SensingInterval.IsSet() {
		return true
	}

	return false
}

// SetSensingInterval gets a reference to the given NullableString and assigns it to the SensingInterval field.
func (o *MetricDefinitionV111MetricDefinition) SetSensingInterval(v string) {
	o.SensingInterval.Set(&v)
}
// SetSensingIntervalNil sets the value for SensingInterval to be an explicit nil
func (o *MetricDefinitionV111MetricDefinition) SetSensingIntervalNil() {
	o.SensingInterval.Set(nil)
}

// UnsetSensingInterval ensures that no value is present for SensingInterval, not even an explicit nil
func (o *MetricDefinitionV111MetricDefinition) UnsetSensingInterval() {
	o.SensingInterval.Unset()
}

// GetTimestampAccuracy returns the TimestampAccuracy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetricDefinitionV111MetricDefinition) GetTimestampAccuracy() string {
	if o == nil || o.TimestampAccuracy.Get() == nil {
		var ret string
		return ret
	}
	return *o.TimestampAccuracy.Get()
}

// GetTimestampAccuracyOk returns a tuple with the TimestampAccuracy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetricDefinitionV111MetricDefinition) GetTimestampAccuracyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TimestampAccuracy.Get(), o.TimestampAccuracy.IsSet()
}

// HasTimestampAccuracy returns a boolean if a field has been set.
func (o *MetricDefinitionV111MetricDefinition) HasTimestampAccuracy() bool {
	if o != nil && o.TimestampAccuracy.IsSet() {
		return true
	}

	return false
}

// SetTimestampAccuracy gets a reference to the given NullableString and assigns it to the TimestampAccuracy field.
func (o *MetricDefinitionV111MetricDefinition) SetTimestampAccuracy(v string) {
	o.TimestampAccuracy.Set(&v)
}
// SetTimestampAccuracyNil sets the value for TimestampAccuracy to be an explicit nil
func (o *MetricDefinitionV111MetricDefinition) SetTimestampAccuracyNil() {
	o.TimestampAccuracy.Set(nil)
}

// UnsetTimestampAccuracy ensures that no value is present for TimestampAccuracy, not even an explicit nil
func (o *MetricDefinitionV111MetricDefinition) UnsetTimestampAccuracy() {
	o.TimestampAccuracy.Unset()
}

// GetUnits returns the Units field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetricDefinitionV111MetricDefinition) GetUnits() string {
	if o == nil || o.Units.Get() == nil {
		var ret string
		return ret
	}
	return *o.Units.Get()
}

// GetUnitsOk returns a tuple with the Units field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetricDefinitionV111MetricDefinition) GetUnitsOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Units.Get(), o.Units.IsSet()
}

// HasUnits returns a boolean if a field has been set.
func (o *MetricDefinitionV111MetricDefinition) HasUnits() bool {
	if o != nil && o.Units.IsSet() {
		return true
	}

	return false
}

// SetUnits gets a reference to the given NullableString and assigns it to the Units field.
func (o *MetricDefinitionV111MetricDefinition) SetUnits(v string) {
	o.Units.Set(&v)
}
// SetUnitsNil sets the value for Units to be an explicit nil
func (o *MetricDefinitionV111MetricDefinition) SetUnitsNil() {
	o.Units.Set(nil)
}

// UnsetUnits ensures that no value is present for Units, not even an explicit nil
func (o *MetricDefinitionV111MetricDefinition) UnsetUnits() {
	o.Units.Unset()
}

// GetWildcards returns the Wildcards field value if set, zero value otherwise.
func (o *MetricDefinitionV111MetricDefinition) GetWildcards() []MetricDefinitionV111Wildcard {
	if o == nil || o.Wildcards == nil {
		var ret []MetricDefinitionV111Wildcard
		return ret
	}
	return *o.Wildcards
}

// GetWildcardsOk returns a tuple with the Wildcards field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricDefinitionV111MetricDefinition) GetWildcardsOk() (*[]MetricDefinitionV111Wildcard, bool) {
	if o == nil || o.Wildcards == nil {
		return nil, false
	}
	return o.Wildcards, true
}

// HasWildcards returns a boolean if a field has been set.
func (o *MetricDefinitionV111MetricDefinition) HasWildcards() bool {
	if o != nil && o.Wildcards != nil {
		return true
	}

	return false
}

// SetWildcards gets a reference to the given []MetricDefinitionV111Wildcard and assigns it to the Wildcards field.
func (o *MetricDefinitionV111MetricDefinition) SetWildcards(v []MetricDefinitionV111Wildcard) {
	o.Wildcards = &v
}

func (o MetricDefinitionV111MetricDefinition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.OdataContext != nil {
		toSerialize["@odata.context"] = o.OdataContext
	}
	if o.OdataEtag != nil {
		toSerialize["@odata.etag"] = o.OdataEtag
	}
	if true {
		toSerialize["@odata.id"] = o.OdataId
	}
	if true {
		toSerialize["@odata.type"] = o.OdataType
	}
	if o.Accuracy.IsSet() {
		toSerialize["Accuracy"] = o.Accuracy.Get()
	}
	if o.Actions != nil {
		toSerialize["Actions"] = o.Actions
	}
	if o.Calculable != nil {
		toSerialize["Calculable"] = o.Calculable
	}
	if o.CalculationAlgorithm != nil {
		toSerialize["CalculationAlgorithm"] = o.CalculationAlgorithm
	}
	if o.CalculationParameters != nil {
		toSerialize["CalculationParameters"] = o.CalculationParameters
	}
	if o.CalculationTimeInterval.IsSet() {
		toSerialize["CalculationTimeInterval"] = o.CalculationTimeInterval.Get()
	}
	if o.Calibration.IsSet() {
		toSerialize["Calibration"] = o.Calibration.Get()
	}
	if o.Description != nil {
		toSerialize["Description"] = o.Description
	}
	if o.DiscreteValues != nil {
		toSerialize["DiscreteValues"] = o.DiscreteValues
	}
	if true {
		toSerialize["Id"] = o.Id
	}
	if o.Implementation != nil {
		toSerialize["Implementation"] = o.Implementation
	}
	if o.IsLinear.IsSet() {
		toSerialize["IsLinear"] = o.IsLinear.Get()
	}
	if o.MaxReadingRange.IsSet() {
		toSerialize["MaxReadingRange"] = o.MaxReadingRange.Get()
	}
	if o.MetricDataType != nil {
		toSerialize["MetricDataType"] = o.MetricDataType
	}
	if o.MetricProperties != nil {
		toSerialize["MetricProperties"] = o.MetricProperties
	}
	if o.MetricType != nil {
		toSerialize["MetricType"] = o.MetricType
	}
	if o.MinReadingRange.IsSet() {
		toSerialize["MinReadingRange"] = o.MinReadingRange.Get()
	}
	if true {
		toSerialize["Name"] = o.Name
	}
	if o.OEMCalculationAlgorithm.IsSet() {
		toSerialize["OEMCalculationAlgorithm"] = o.OEMCalculationAlgorithm.Get()
	}
	if o.Oem != nil {
		toSerialize["Oem"] = o.Oem
	}
	if o.PhysicalContext != nil {
		toSerialize["PhysicalContext"] = o.PhysicalContext
	}
	if o.Precision.IsSet() {
		toSerialize["Precision"] = o.Precision.Get()
	}
	if o.SensingInterval.IsSet() {
		toSerialize["SensingInterval"] = o.SensingInterval.Get()
	}
	if o.TimestampAccuracy.IsSet() {
		toSerialize["TimestampAccuracy"] = o.TimestampAccuracy.Get()
	}
	if o.Units.IsSet() {
		toSerialize["Units"] = o.Units.Get()
	}
	if o.Wildcards != nil {
		toSerialize["Wildcards"] = o.Wildcards
	}
	return json.Marshal(toSerialize)
}

type NullableMetricDefinitionV111MetricDefinition struct {
	value *MetricDefinitionV111MetricDefinition
	isSet bool
}

func (v NullableMetricDefinitionV111MetricDefinition) Get() *MetricDefinitionV111MetricDefinition {
	return v.value
}

func (v *NullableMetricDefinitionV111MetricDefinition) Set(val *MetricDefinitionV111MetricDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricDefinitionV111MetricDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricDefinitionV111MetricDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricDefinitionV111MetricDefinition(val *MetricDefinitionV111MetricDefinition) *NullableMetricDefinitionV111MetricDefinition {
	return &NullableMetricDefinitionV111MetricDefinition{value: val, isSet: true}
}

func (v NullableMetricDefinitionV111MetricDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricDefinitionV111MetricDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


