/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2020.4
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package redfish

import (
	"encoding/json"
)

// MetricReportDefinitionV140MetricReportDefinition The MetricReportDefinition schema describes set of metrics that are collected into a metric report.
type MetricReportDefinitionV140MetricReportDefinition struct {
	// The OData description of a payload.
	OdataContext *string `json:"@odata.context,omitempty"`
	// The current ETag of the resource.
	OdataEtag *string `json:"@odata.etag,omitempty"`
	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`
	// The type of a resource.
	OdataType string `json:"@odata.type"`
	Actions *MetricReportDefinitionV140Actions `json:"Actions,omitempty"`
	// The maximum number of entries that can be appended to a metric report.  When the metric report reaches its limit, its behavior is dictated by the ReportUpdates property.
	AppendLimit *int64 `json:"AppendLimit,omitempty"`
	// The description of this resource.  Used for commonality in the schema definitions.
	Description *string `json:"Description,omitempty"`
	// The identifier that uniquely identifies the resource within the collection of similar resources.
	Id string `json:"Id"`
	Links *MetricReportDefinitionV140Links `json:"Links,omitempty"`
	// The list of URIs with wildcards and property identifiers to include in the metric report.  If a URI has wildcards, the wildcards are substituted as specified in the Wildcards property.
	MetricProperties *[]string `json:"MetricProperties,omitempty"`
	MetricReport *OdataV4IdRef `json:"MetricReport,omitempty"`
	// An indication of whether the generation of new metric reports is enabled.
	MetricReportDefinitionEnabled NullableBool `json:"MetricReportDefinitionEnabled,omitempty"`
	MetricReportDefinitionType *MetricReportDefinitionV140MetricReportDefinitionType `json:"MetricReportDefinitionType,omitempty"`
	// The interval at which to send the complete metric report because the Redfish client wants refreshed metric data even when the data has not changed.  This property value is always greater than the recurrence interval of a metric report, and it only applies when the SuppressRepeatedMetricValue property is `true`.
	MetricReportHeartbeatInterval NullableString `json:"MetricReportHeartbeatInterval,omitempty"`
	// The list of metrics to include in the metric report.  The metrics might include metric properties or calculations applied to a metric property.
	Metrics *[]MetricReportDefinitionV140Metric `json:"Metrics,omitempty"`
	// The name of the resource or array member.
	Name string `json:"Name"`
	// The OEM extension.
	Oem *map[string]map[string]interface{} `json:"Oem,omitempty"`
	// The set of actions to perform when a metric report is generated.
	ReportActions *[]MetricReportDefinitionV140ReportActionsEnum `json:"ReportActions,omitempty"`
	// The maximum timespan that a metric report can cover.
	ReportTimespan NullableString `json:"ReportTimespan,omitempty"`
	ReportUpdates *MetricReportDefinitionV140ReportUpdatesEnum `json:"ReportUpdates,omitempty"`
	Schedule *ScheduleSchedule `json:"Schedule,omitempty"`
	Status *ResourceStatus `json:"Status,omitempty"`
	// An indication of whether any metrics are suppressed from the generated metric report.  If `true`, any metric that equals the same value in the previously generated metric report is suppressed from the current report.  Also, duplicate metrics are suppressed.  If `false`, no metrics are suppressed from the current report.  The current report might contain no metrics if all metrics equal the values in the previously generated metric report.
	SuppressRepeatedMetricValue NullableBool `json:"SuppressRepeatedMetricValue,omitempty"`
	// The set of wildcards and their substitution values for the entries in the MetricProperties property.
	Wildcards *[]MetricReportDefinitionV140Wildcard `json:"Wildcards,omitempty"`
}

// NewMetricReportDefinitionV140MetricReportDefinition instantiates a new MetricReportDefinitionV140MetricReportDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricReportDefinitionV140MetricReportDefinition(odataId string, odataType string, id string, name string, ) *MetricReportDefinitionV140MetricReportDefinition {
	this := MetricReportDefinitionV140MetricReportDefinition{}
	this.OdataId = odataId
	this.OdataType = odataType
	this.Id = id
	this.Name = name
	return &this
}

// NewMetricReportDefinitionV140MetricReportDefinitionWithDefaults instantiates a new MetricReportDefinitionV140MetricReportDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricReportDefinitionV140MetricReportDefinitionWithDefaults() *MetricReportDefinitionV140MetricReportDefinition {
	this := MetricReportDefinitionV140MetricReportDefinition{}
	return &this
}

// GetOdataContext returns the OdataContext field value if set, zero value otherwise.
func (o *MetricReportDefinitionV140MetricReportDefinition) GetOdataContext() string {
	if o == nil || o.OdataContext == nil {
		var ret string
		return ret
	}
	return *o.OdataContext
}

// GetOdataContextOk returns a tuple with the OdataContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricReportDefinitionV140MetricReportDefinition) GetOdataContextOk() (*string, bool) {
	if o == nil || o.OdataContext == nil {
		return nil, false
	}
	return o.OdataContext, true
}

// HasOdataContext returns a boolean if a field has been set.
func (o *MetricReportDefinitionV140MetricReportDefinition) HasOdataContext() bool {
	if o != nil && o.OdataContext != nil {
		return true
	}

	return false
}

// SetOdataContext gets a reference to the given string and assigns it to the OdataContext field.
func (o *MetricReportDefinitionV140MetricReportDefinition) SetOdataContext(v string) {
	o.OdataContext = &v
}

// GetOdataEtag returns the OdataEtag field value if set, zero value otherwise.
func (o *MetricReportDefinitionV140MetricReportDefinition) GetOdataEtag() string {
	if o == nil || o.OdataEtag == nil {
		var ret string
		return ret
	}
	return *o.OdataEtag
}

// GetOdataEtagOk returns a tuple with the OdataEtag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricReportDefinitionV140MetricReportDefinition) GetOdataEtagOk() (*string, bool) {
	if o == nil || o.OdataEtag == nil {
		return nil, false
	}
	return o.OdataEtag, true
}

// HasOdataEtag returns a boolean if a field has been set.
func (o *MetricReportDefinitionV140MetricReportDefinition) HasOdataEtag() bool {
	if o != nil && o.OdataEtag != nil {
		return true
	}

	return false
}

// SetOdataEtag gets a reference to the given string and assigns it to the OdataEtag field.
func (o *MetricReportDefinitionV140MetricReportDefinition) SetOdataEtag(v string) {
	o.OdataEtag = &v
}

// GetOdataId returns the OdataId field value
func (o *MetricReportDefinitionV140MetricReportDefinition) GetOdataId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.OdataId
}

// GetOdataIdOk returns a tuple with the OdataId field value
// and a boolean to check if the value has been set.
func (o *MetricReportDefinitionV140MetricReportDefinition) GetOdataIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.OdataId, true
}

// SetOdataId sets field value
func (o *MetricReportDefinitionV140MetricReportDefinition) SetOdataId(v string) {
	o.OdataId = v
}

// GetOdataType returns the OdataType field value
func (o *MetricReportDefinitionV140MetricReportDefinition) GetOdataType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.OdataType
}

// GetOdataTypeOk returns a tuple with the OdataType field value
// and a boolean to check if the value has been set.
func (o *MetricReportDefinitionV140MetricReportDefinition) GetOdataTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.OdataType, true
}

// SetOdataType sets field value
func (o *MetricReportDefinitionV140MetricReportDefinition) SetOdataType(v string) {
	o.OdataType = v
}

// GetActions returns the Actions field value if set, zero value otherwise.
func (o *MetricReportDefinitionV140MetricReportDefinition) GetActions() MetricReportDefinitionV140Actions {
	if o == nil || o.Actions == nil {
		var ret MetricReportDefinitionV140Actions
		return ret
	}
	return *o.Actions
}

// GetActionsOk returns a tuple with the Actions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricReportDefinitionV140MetricReportDefinition) GetActionsOk() (*MetricReportDefinitionV140Actions, bool) {
	if o == nil || o.Actions == nil {
		return nil, false
	}
	return o.Actions, true
}

// HasActions returns a boolean if a field has been set.
func (o *MetricReportDefinitionV140MetricReportDefinition) HasActions() bool {
	if o != nil && o.Actions != nil {
		return true
	}

	return false
}

// SetActions gets a reference to the given MetricReportDefinitionV140Actions and assigns it to the Actions field.
func (o *MetricReportDefinitionV140MetricReportDefinition) SetActions(v MetricReportDefinitionV140Actions) {
	o.Actions = &v
}

// GetAppendLimit returns the AppendLimit field value if set, zero value otherwise.
func (o *MetricReportDefinitionV140MetricReportDefinition) GetAppendLimit() int64 {
	if o == nil || o.AppendLimit == nil {
		var ret int64
		return ret
	}
	return *o.AppendLimit
}

// GetAppendLimitOk returns a tuple with the AppendLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricReportDefinitionV140MetricReportDefinition) GetAppendLimitOk() (*int64, bool) {
	if o == nil || o.AppendLimit == nil {
		return nil, false
	}
	return o.AppendLimit, true
}

// HasAppendLimit returns a boolean if a field has been set.
func (o *MetricReportDefinitionV140MetricReportDefinition) HasAppendLimit() bool {
	if o != nil && o.AppendLimit != nil {
		return true
	}

	return false
}

// SetAppendLimit gets a reference to the given int64 and assigns it to the AppendLimit field.
func (o *MetricReportDefinitionV140MetricReportDefinition) SetAppendLimit(v int64) {
	o.AppendLimit = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *MetricReportDefinitionV140MetricReportDefinition) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricReportDefinitionV140MetricReportDefinition) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *MetricReportDefinitionV140MetricReportDefinition) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *MetricReportDefinitionV140MetricReportDefinition) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value
func (o *MetricReportDefinitionV140MetricReportDefinition) GetId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *MetricReportDefinitionV140MetricReportDefinition) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *MetricReportDefinitionV140MetricReportDefinition) SetId(v string) {
	o.Id = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *MetricReportDefinitionV140MetricReportDefinition) GetLinks() MetricReportDefinitionV140Links {
	if o == nil || o.Links == nil {
		var ret MetricReportDefinitionV140Links
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricReportDefinitionV140MetricReportDefinition) GetLinksOk() (*MetricReportDefinitionV140Links, bool) {
	if o == nil || o.Links == nil {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *MetricReportDefinitionV140MetricReportDefinition) HasLinks() bool {
	if o != nil && o.Links != nil {
		return true
	}

	return false
}

// SetLinks gets a reference to the given MetricReportDefinitionV140Links and assigns it to the Links field.
func (o *MetricReportDefinitionV140MetricReportDefinition) SetLinks(v MetricReportDefinitionV140Links) {
	o.Links = &v
}

// GetMetricProperties returns the MetricProperties field value if set, zero value otherwise.
func (o *MetricReportDefinitionV140MetricReportDefinition) GetMetricProperties() []string {
	if o == nil || o.MetricProperties == nil {
		var ret []string
		return ret
	}
	return *o.MetricProperties
}

// GetMetricPropertiesOk returns a tuple with the MetricProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricReportDefinitionV140MetricReportDefinition) GetMetricPropertiesOk() (*[]string, bool) {
	if o == nil || o.MetricProperties == nil {
		return nil, false
	}
	return o.MetricProperties, true
}

// HasMetricProperties returns a boolean if a field has been set.
func (o *MetricReportDefinitionV140MetricReportDefinition) HasMetricProperties() bool {
	if o != nil && o.MetricProperties != nil {
		return true
	}

	return false
}

// SetMetricProperties gets a reference to the given []string and assigns it to the MetricProperties field.
func (o *MetricReportDefinitionV140MetricReportDefinition) SetMetricProperties(v []string) {
	o.MetricProperties = &v
}

// GetMetricReport returns the MetricReport field value if set, zero value otherwise.
func (o *MetricReportDefinitionV140MetricReportDefinition) GetMetricReport() OdataV4IdRef {
	if o == nil || o.MetricReport == nil {
		var ret OdataV4IdRef
		return ret
	}
	return *o.MetricReport
}

// GetMetricReportOk returns a tuple with the MetricReport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricReportDefinitionV140MetricReportDefinition) GetMetricReportOk() (*OdataV4IdRef, bool) {
	if o == nil || o.MetricReport == nil {
		return nil, false
	}
	return o.MetricReport, true
}

// HasMetricReport returns a boolean if a field has been set.
func (o *MetricReportDefinitionV140MetricReportDefinition) HasMetricReport() bool {
	if o != nil && o.MetricReport != nil {
		return true
	}

	return false
}

// SetMetricReport gets a reference to the given OdataV4IdRef and assigns it to the MetricReport field.
func (o *MetricReportDefinitionV140MetricReportDefinition) SetMetricReport(v OdataV4IdRef) {
	o.MetricReport = &v
}

// GetMetricReportDefinitionEnabled returns the MetricReportDefinitionEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetricReportDefinitionV140MetricReportDefinition) GetMetricReportDefinitionEnabled() bool {
	if o == nil || o.MetricReportDefinitionEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.MetricReportDefinitionEnabled.Get()
}

// GetMetricReportDefinitionEnabledOk returns a tuple with the MetricReportDefinitionEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetricReportDefinitionV140MetricReportDefinition) GetMetricReportDefinitionEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MetricReportDefinitionEnabled.Get(), o.MetricReportDefinitionEnabled.IsSet()
}

// HasMetricReportDefinitionEnabled returns a boolean if a field has been set.
func (o *MetricReportDefinitionV140MetricReportDefinition) HasMetricReportDefinitionEnabled() bool {
	if o != nil && o.MetricReportDefinitionEnabled.IsSet() {
		return true
	}

	return false
}

// SetMetricReportDefinitionEnabled gets a reference to the given NullableBool and assigns it to the MetricReportDefinitionEnabled field.
func (o *MetricReportDefinitionV140MetricReportDefinition) SetMetricReportDefinitionEnabled(v bool) {
	o.MetricReportDefinitionEnabled.Set(&v)
}
// SetMetricReportDefinitionEnabledNil sets the value for MetricReportDefinitionEnabled to be an explicit nil
func (o *MetricReportDefinitionV140MetricReportDefinition) SetMetricReportDefinitionEnabledNil() {
	o.MetricReportDefinitionEnabled.Set(nil)
}

// UnsetMetricReportDefinitionEnabled ensures that no value is present for MetricReportDefinitionEnabled, not even an explicit nil
func (o *MetricReportDefinitionV140MetricReportDefinition) UnsetMetricReportDefinitionEnabled() {
	o.MetricReportDefinitionEnabled.Unset()
}

// GetMetricReportDefinitionType returns the MetricReportDefinitionType field value if set, zero value otherwise.
func (o *MetricReportDefinitionV140MetricReportDefinition) GetMetricReportDefinitionType() MetricReportDefinitionV140MetricReportDefinitionType {
	if o == nil || o.MetricReportDefinitionType == nil {
		var ret MetricReportDefinitionV140MetricReportDefinitionType
		return ret
	}
	return *o.MetricReportDefinitionType
}

// GetMetricReportDefinitionTypeOk returns a tuple with the MetricReportDefinitionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricReportDefinitionV140MetricReportDefinition) GetMetricReportDefinitionTypeOk() (*MetricReportDefinitionV140MetricReportDefinitionType, bool) {
	if o == nil || o.MetricReportDefinitionType == nil {
		return nil, false
	}
	return o.MetricReportDefinitionType, true
}

// HasMetricReportDefinitionType returns a boolean if a field has been set.
func (o *MetricReportDefinitionV140MetricReportDefinition) HasMetricReportDefinitionType() bool {
	if o != nil && o.MetricReportDefinitionType != nil {
		return true
	}

	return false
}

// SetMetricReportDefinitionType gets a reference to the given MetricReportDefinitionV140MetricReportDefinitionType and assigns it to the MetricReportDefinitionType field.
func (o *MetricReportDefinitionV140MetricReportDefinition) SetMetricReportDefinitionType(v MetricReportDefinitionV140MetricReportDefinitionType) {
	o.MetricReportDefinitionType = &v
}

// GetMetricReportHeartbeatInterval returns the MetricReportHeartbeatInterval field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetricReportDefinitionV140MetricReportDefinition) GetMetricReportHeartbeatInterval() string {
	if o == nil || o.MetricReportHeartbeatInterval.Get() == nil {
		var ret string
		return ret
	}
	return *o.MetricReportHeartbeatInterval.Get()
}

// GetMetricReportHeartbeatIntervalOk returns a tuple with the MetricReportHeartbeatInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetricReportDefinitionV140MetricReportDefinition) GetMetricReportHeartbeatIntervalOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MetricReportHeartbeatInterval.Get(), o.MetricReportHeartbeatInterval.IsSet()
}

// HasMetricReportHeartbeatInterval returns a boolean if a field has been set.
func (o *MetricReportDefinitionV140MetricReportDefinition) HasMetricReportHeartbeatInterval() bool {
	if o != nil && o.MetricReportHeartbeatInterval.IsSet() {
		return true
	}

	return false
}

// SetMetricReportHeartbeatInterval gets a reference to the given NullableString and assigns it to the MetricReportHeartbeatInterval field.
func (o *MetricReportDefinitionV140MetricReportDefinition) SetMetricReportHeartbeatInterval(v string) {
	o.MetricReportHeartbeatInterval.Set(&v)
}
// SetMetricReportHeartbeatIntervalNil sets the value for MetricReportHeartbeatInterval to be an explicit nil
func (o *MetricReportDefinitionV140MetricReportDefinition) SetMetricReportHeartbeatIntervalNil() {
	o.MetricReportHeartbeatInterval.Set(nil)
}

// UnsetMetricReportHeartbeatInterval ensures that no value is present for MetricReportHeartbeatInterval, not even an explicit nil
func (o *MetricReportDefinitionV140MetricReportDefinition) UnsetMetricReportHeartbeatInterval() {
	o.MetricReportHeartbeatInterval.Unset()
}

// GetMetrics returns the Metrics field value if set, zero value otherwise.
func (o *MetricReportDefinitionV140MetricReportDefinition) GetMetrics() []MetricReportDefinitionV140Metric {
	if o == nil || o.Metrics == nil {
		var ret []MetricReportDefinitionV140Metric
		return ret
	}
	return *o.Metrics
}

// GetMetricsOk returns a tuple with the Metrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricReportDefinitionV140MetricReportDefinition) GetMetricsOk() (*[]MetricReportDefinitionV140Metric, bool) {
	if o == nil || o.Metrics == nil {
		return nil, false
	}
	return o.Metrics, true
}

// HasMetrics returns a boolean if a field has been set.
func (o *MetricReportDefinitionV140MetricReportDefinition) HasMetrics() bool {
	if o != nil && o.Metrics != nil {
		return true
	}

	return false
}

// SetMetrics gets a reference to the given []MetricReportDefinitionV140Metric and assigns it to the Metrics field.
func (o *MetricReportDefinitionV140MetricReportDefinition) SetMetrics(v []MetricReportDefinitionV140Metric) {
	o.Metrics = &v
}

// GetName returns the Name field value
func (o *MetricReportDefinitionV140MetricReportDefinition) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MetricReportDefinitionV140MetricReportDefinition) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MetricReportDefinitionV140MetricReportDefinition) SetName(v string) {
	o.Name = v
}

// GetOem returns the Oem field value if set, zero value otherwise.
func (o *MetricReportDefinitionV140MetricReportDefinition) GetOem() map[string]map[string]interface{} {
	if o == nil || o.Oem == nil {
		var ret map[string]map[string]interface{}
		return ret
	}
	return *o.Oem
}

// GetOemOk returns a tuple with the Oem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricReportDefinitionV140MetricReportDefinition) GetOemOk() (*map[string]map[string]interface{}, bool) {
	if o == nil || o.Oem == nil {
		return nil, false
	}
	return o.Oem, true
}

// HasOem returns a boolean if a field has been set.
func (o *MetricReportDefinitionV140MetricReportDefinition) HasOem() bool {
	if o != nil && o.Oem != nil {
		return true
	}

	return false
}

// SetOem gets a reference to the given map[string]map[string]interface{} and assigns it to the Oem field.
func (o *MetricReportDefinitionV140MetricReportDefinition) SetOem(v map[string]map[string]interface{}) {
	o.Oem = &v
}

// GetReportActions returns the ReportActions field value if set, zero value otherwise.
func (o *MetricReportDefinitionV140MetricReportDefinition) GetReportActions() []MetricReportDefinitionV140ReportActionsEnum {
	if o == nil || o.ReportActions == nil {
		var ret []MetricReportDefinitionV140ReportActionsEnum
		return ret
	}
	return *o.ReportActions
}

// GetReportActionsOk returns a tuple with the ReportActions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricReportDefinitionV140MetricReportDefinition) GetReportActionsOk() (*[]MetricReportDefinitionV140ReportActionsEnum, bool) {
	if o == nil || o.ReportActions == nil {
		return nil, false
	}
	return o.ReportActions, true
}

// HasReportActions returns a boolean if a field has been set.
func (o *MetricReportDefinitionV140MetricReportDefinition) HasReportActions() bool {
	if o != nil && o.ReportActions != nil {
		return true
	}

	return false
}

// SetReportActions gets a reference to the given []MetricReportDefinitionV140ReportActionsEnum and assigns it to the ReportActions field.
func (o *MetricReportDefinitionV140MetricReportDefinition) SetReportActions(v []MetricReportDefinitionV140ReportActionsEnum) {
	o.ReportActions = &v
}

// GetReportTimespan returns the ReportTimespan field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetricReportDefinitionV140MetricReportDefinition) GetReportTimespan() string {
	if o == nil || o.ReportTimespan.Get() == nil {
		var ret string
		return ret
	}
	return *o.ReportTimespan.Get()
}

// GetReportTimespanOk returns a tuple with the ReportTimespan field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetricReportDefinitionV140MetricReportDefinition) GetReportTimespanOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ReportTimespan.Get(), o.ReportTimespan.IsSet()
}

// HasReportTimespan returns a boolean if a field has been set.
func (o *MetricReportDefinitionV140MetricReportDefinition) HasReportTimespan() bool {
	if o != nil && o.ReportTimespan.IsSet() {
		return true
	}

	return false
}

// SetReportTimespan gets a reference to the given NullableString and assigns it to the ReportTimespan field.
func (o *MetricReportDefinitionV140MetricReportDefinition) SetReportTimespan(v string) {
	o.ReportTimespan.Set(&v)
}
// SetReportTimespanNil sets the value for ReportTimespan to be an explicit nil
func (o *MetricReportDefinitionV140MetricReportDefinition) SetReportTimespanNil() {
	o.ReportTimespan.Set(nil)
}

// UnsetReportTimespan ensures that no value is present for ReportTimespan, not even an explicit nil
func (o *MetricReportDefinitionV140MetricReportDefinition) UnsetReportTimespan() {
	o.ReportTimespan.Unset()
}

// GetReportUpdates returns the ReportUpdates field value if set, zero value otherwise.
func (o *MetricReportDefinitionV140MetricReportDefinition) GetReportUpdates() MetricReportDefinitionV140ReportUpdatesEnum {
	if o == nil || o.ReportUpdates == nil {
		var ret MetricReportDefinitionV140ReportUpdatesEnum
		return ret
	}
	return *o.ReportUpdates
}

// GetReportUpdatesOk returns a tuple with the ReportUpdates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricReportDefinitionV140MetricReportDefinition) GetReportUpdatesOk() (*MetricReportDefinitionV140ReportUpdatesEnum, bool) {
	if o == nil || o.ReportUpdates == nil {
		return nil, false
	}
	return o.ReportUpdates, true
}

// HasReportUpdates returns a boolean if a field has been set.
func (o *MetricReportDefinitionV140MetricReportDefinition) HasReportUpdates() bool {
	if o != nil && o.ReportUpdates != nil {
		return true
	}

	return false
}

// SetReportUpdates gets a reference to the given MetricReportDefinitionV140ReportUpdatesEnum and assigns it to the ReportUpdates field.
func (o *MetricReportDefinitionV140MetricReportDefinition) SetReportUpdates(v MetricReportDefinitionV140ReportUpdatesEnum) {
	o.ReportUpdates = &v
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *MetricReportDefinitionV140MetricReportDefinition) GetSchedule() ScheduleSchedule {
	if o == nil || o.Schedule == nil {
		var ret ScheduleSchedule
		return ret
	}
	return *o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricReportDefinitionV140MetricReportDefinition) GetScheduleOk() (*ScheduleSchedule, bool) {
	if o == nil || o.Schedule == nil {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *MetricReportDefinitionV140MetricReportDefinition) HasSchedule() bool {
	if o != nil && o.Schedule != nil {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given ScheduleSchedule and assigns it to the Schedule field.
func (o *MetricReportDefinitionV140MetricReportDefinition) SetSchedule(v ScheduleSchedule) {
	o.Schedule = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *MetricReportDefinitionV140MetricReportDefinition) GetStatus() ResourceStatus {
	if o == nil || o.Status == nil {
		var ret ResourceStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricReportDefinitionV140MetricReportDefinition) GetStatusOk() (*ResourceStatus, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *MetricReportDefinitionV140MetricReportDefinition) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ResourceStatus and assigns it to the Status field.
func (o *MetricReportDefinitionV140MetricReportDefinition) SetStatus(v ResourceStatus) {
	o.Status = &v
}

// GetSuppressRepeatedMetricValue returns the SuppressRepeatedMetricValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetricReportDefinitionV140MetricReportDefinition) GetSuppressRepeatedMetricValue() bool {
	if o == nil || o.SuppressRepeatedMetricValue.Get() == nil {
		var ret bool
		return ret
	}
	return *o.SuppressRepeatedMetricValue.Get()
}

// GetSuppressRepeatedMetricValueOk returns a tuple with the SuppressRepeatedMetricValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetricReportDefinitionV140MetricReportDefinition) GetSuppressRepeatedMetricValueOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SuppressRepeatedMetricValue.Get(), o.SuppressRepeatedMetricValue.IsSet()
}

// HasSuppressRepeatedMetricValue returns a boolean if a field has been set.
func (o *MetricReportDefinitionV140MetricReportDefinition) HasSuppressRepeatedMetricValue() bool {
	if o != nil && o.SuppressRepeatedMetricValue.IsSet() {
		return true
	}

	return false
}

// SetSuppressRepeatedMetricValue gets a reference to the given NullableBool and assigns it to the SuppressRepeatedMetricValue field.
func (o *MetricReportDefinitionV140MetricReportDefinition) SetSuppressRepeatedMetricValue(v bool) {
	o.SuppressRepeatedMetricValue.Set(&v)
}
// SetSuppressRepeatedMetricValueNil sets the value for SuppressRepeatedMetricValue to be an explicit nil
func (o *MetricReportDefinitionV140MetricReportDefinition) SetSuppressRepeatedMetricValueNil() {
	o.SuppressRepeatedMetricValue.Set(nil)
}

// UnsetSuppressRepeatedMetricValue ensures that no value is present for SuppressRepeatedMetricValue, not even an explicit nil
func (o *MetricReportDefinitionV140MetricReportDefinition) UnsetSuppressRepeatedMetricValue() {
	o.SuppressRepeatedMetricValue.Unset()
}

// GetWildcards returns the Wildcards field value if set, zero value otherwise.
func (o *MetricReportDefinitionV140MetricReportDefinition) GetWildcards() []MetricReportDefinitionV140Wildcard {
	if o == nil || o.Wildcards == nil {
		var ret []MetricReportDefinitionV140Wildcard
		return ret
	}
	return *o.Wildcards
}

// GetWildcardsOk returns a tuple with the Wildcards field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricReportDefinitionV140MetricReportDefinition) GetWildcardsOk() (*[]MetricReportDefinitionV140Wildcard, bool) {
	if o == nil || o.Wildcards == nil {
		return nil, false
	}
	return o.Wildcards, true
}

// HasWildcards returns a boolean if a field has been set.
func (o *MetricReportDefinitionV140MetricReportDefinition) HasWildcards() bool {
	if o != nil && o.Wildcards != nil {
		return true
	}

	return false
}

// SetWildcards gets a reference to the given []MetricReportDefinitionV140Wildcard and assigns it to the Wildcards field.
func (o *MetricReportDefinitionV140MetricReportDefinition) SetWildcards(v []MetricReportDefinitionV140Wildcard) {
	o.Wildcards = &v
}

func (o MetricReportDefinitionV140MetricReportDefinition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.OdataContext != nil {
		toSerialize["@odata.context"] = o.OdataContext
	}
	if o.OdataEtag != nil {
		toSerialize["@odata.etag"] = o.OdataEtag
	}
	if true {
		toSerialize["@odata.id"] = o.OdataId
	}
	if true {
		toSerialize["@odata.type"] = o.OdataType
	}
	if o.Actions != nil {
		toSerialize["Actions"] = o.Actions
	}
	if o.AppendLimit != nil {
		toSerialize["AppendLimit"] = o.AppendLimit
	}
	if o.Description != nil {
		toSerialize["Description"] = o.Description
	}
	if true {
		toSerialize["Id"] = o.Id
	}
	if o.Links != nil {
		toSerialize["Links"] = o.Links
	}
	if o.MetricProperties != nil {
		toSerialize["MetricProperties"] = o.MetricProperties
	}
	if o.MetricReport != nil {
		toSerialize["MetricReport"] = o.MetricReport
	}
	if o.MetricReportDefinitionEnabled.IsSet() {
		toSerialize["MetricReportDefinitionEnabled"] = o.MetricReportDefinitionEnabled.Get()
	}
	if o.MetricReportDefinitionType != nil {
		toSerialize["MetricReportDefinitionType"] = o.MetricReportDefinitionType
	}
	if o.MetricReportHeartbeatInterval.IsSet() {
		toSerialize["MetricReportHeartbeatInterval"] = o.MetricReportHeartbeatInterval.Get()
	}
	if o.Metrics != nil {
		toSerialize["Metrics"] = o.Metrics
	}
	if true {
		toSerialize["Name"] = o.Name
	}
	if o.Oem != nil {
		toSerialize["Oem"] = o.Oem
	}
	if o.ReportActions != nil {
		toSerialize["ReportActions"] = o.ReportActions
	}
	if o.ReportTimespan.IsSet() {
		toSerialize["ReportTimespan"] = o.ReportTimespan.Get()
	}
	if o.ReportUpdates != nil {
		toSerialize["ReportUpdates"] = o.ReportUpdates
	}
	if o.Schedule != nil {
		toSerialize["Schedule"] = o.Schedule
	}
	if o.Status != nil {
		toSerialize["Status"] = o.Status
	}
	if o.SuppressRepeatedMetricValue.IsSet() {
		toSerialize["SuppressRepeatedMetricValue"] = o.SuppressRepeatedMetricValue.Get()
	}
	if o.Wildcards != nil {
		toSerialize["Wildcards"] = o.Wildcards
	}
	return json.Marshal(toSerialize)
}

type NullableMetricReportDefinitionV140MetricReportDefinition struct {
	value *MetricReportDefinitionV140MetricReportDefinition
	isSet bool
}

func (v NullableMetricReportDefinitionV140MetricReportDefinition) Get() *MetricReportDefinitionV140MetricReportDefinition {
	return v.value
}

func (v *NullableMetricReportDefinitionV140MetricReportDefinition) Set(val *MetricReportDefinitionV140MetricReportDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricReportDefinitionV140MetricReportDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricReportDefinitionV140MetricReportDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricReportDefinitionV140MetricReportDefinition(val *MetricReportDefinitionV140MetricReportDefinition) *NullableMetricReportDefinitionV140MetricReportDefinition {
	return &NullableMetricReportDefinitionV140MetricReportDefinition{value: val, isSet: true}
}

func (v NullableMetricReportDefinitionV140MetricReportDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricReportDefinitionV140MetricReportDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


