/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2020.4
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package redfish

import (
	"encoding/json"
)

// MetricReportDefinitionV140Wildcard The wildcard and its substitution values.
type MetricReportDefinitionV140Wildcard struct {
	// An array of values to substitute for the wildcard.
	Keys *[]string `json:"Keys,omitempty"`
	// The string used as a wildcard.
	Name NullableString `json:"Name,omitempty"`
	// An array of values to substitute for the wildcard.
	Values *[]string `json:"Values,omitempty"`
}

// NewMetricReportDefinitionV140Wildcard instantiates a new MetricReportDefinitionV140Wildcard object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricReportDefinitionV140Wildcard() *MetricReportDefinitionV140Wildcard {
	this := MetricReportDefinitionV140Wildcard{}
	return &this
}

// NewMetricReportDefinitionV140WildcardWithDefaults instantiates a new MetricReportDefinitionV140Wildcard object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricReportDefinitionV140WildcardWithDefaults() *MetricReportDefinitionV140Wildcard {
	this := MetricReportDefinitionV140Wildcard{}
	return &this
}

// GetKeys returns the Keys field value if set, zero value otherwise.
func (o *MetricReportDefinitionV140Wildcard) GetKeys() []string {
	if o == nil || o.Keys == nil {
		var ret []string
		return ret
	}
	return *o.Keys
}

// GetKeysOk returns a tuple with the Keys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricReportDefinitionV140Wildcard) GetKeysOk() (*[]string, bool) {
	if o == nil || o.Keys == nil {
		return nil, false
	}
	return o.Keys, true
}

// HasKeys returns a boolean if a field has been set.
func (o *MetricReportDefinitionV140Wildcard) HasKeys() bool {
	if o != nil && o.Keys != nil {
		return true
	}

	return false
}

// SetKeys gets a reference to the given []string and assigns it to the Keys field.
func (o *MetricReportDefinitionV140Wildcard) SetKeys(v []string) {
	o.Keys = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetricReportDefinitionV140Wildcard) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetricReportDefinitionV140Wildcard) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *MetricReportDefinitionV140Wildcard) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *MetricReportDefinitionV140Wildcard) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *MetricReportDefinitionV140Wildcard) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *MetricReportDefinitionV140Wildcard) UnsetName() {
	o.Name.Unset()
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *MetricReportDefinitionV140Wildcard) GetValues() []string {
	if o == nil || o.Values == nil {
		var ret []string
		return ret
	}
	return *o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricReportDefinitionV140Wildcard) GetValuesOk() (*[]string, bool) {
	if o == nil || o.Values == nil {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *MetricReportDefinitionV140Wildcard) HasValues() bool {
	if o != nil && o.Values != nil {
		return true
	}

	return false
}

// SetValues gets a reference to the given []string and assigns it to the Values field.
func (o *MetricReportDefinitionV140Wildcard) SetValues(v []string) {
	o.Values = &v
}

func (o MetricReportDefinitionV140Wildcard) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Keys != nil {
		toSerialize["Keys"] = o.Keys
	}
	if o.Name.IsSet() {
		toSerialize["Name"] = o.Name.Get()
	}
	if o.Values != nil {
		toSerialize["Values"] = o.Values
	}
	return json.Marshal(toSerialize)
}

type NullableMetricReportDefinitionV140Wildcard struct {
	value *MetricReportDefinitionV140Wildcard
	isSet bool
}

func (v NullableMetricReportDefinitionV140Wildcard) Get() *MetricReportDefinitionV140Wildcard {
	return v.value
}

func (v *NullableMetricReportDefinitionV140Wildcard) Set(val *MetricReportDefinitionV140Wildcard) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricReportDefinitionV140Wildcard) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricReportDefinitionV140Wildcard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricReportDefinitionV140Wildcard(val *MetricReportDefinitionV140Wildcard) *NullableMetricReportDefinitionV140Wildcard {
	return &NullableMetricReportDefinitionV140Wildcard{value: val, isSet: true}
}

func (v NullableMetricReportDefinitionV140Wildcard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricReportDefinitionV140Wildcard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


