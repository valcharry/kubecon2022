/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2020.4
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package redfish

import (
	"encoding/json"
	"time"
)

// MetricReportV141MetricValue Properties that capture a metric value and other associated information.
type MetricReportV141MetricValue struct {
	MetricDefinition *OdataV4IdRef `json:"MetricDefinition,omitempty"`
	// The metric definitions identifier for this metric.
	MetricId NullableString `json:"MetricId,omitempty"`
	// The URI for the property from which this metric is derived.
	MetricProperty NullableString `json:"MetricProperty,omitempty"`
	// The metric value, as a string.
	MetricValue NullableString `json:"MetricValue,omitempty"`
	// The OEM extension.
	Oem *map[string]map[string]interface{} `json:"Oem,omitempty"`
	// The date and time when the metric is obtained.  A management application can establish a time series of metric data by retrieving the instances of metric value and sorting them according to their timestamp.
	Timestamp NullableTime `json:"Timestamp,omitempty"`
}

// NewMetricReportV141MetricValue instantiates a new MetricReportV141MetricValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricReportV141MetricValue() *MetricReportV141MetricValue {
	this := MetricReportV141MetricValue{}
	return &this
}

// NewMetricReportV141MetricValueWithDefaults instantiates a new MetricReportV141MetricValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricReportV141MetricValueWithDefaults() *MetricReportV141MetricValue {
	this := MetricReportV141MetricValue{}
	return &this
}

// GetMetricDefinition returns the MetricDefinition field value if set, zero value otherwise.
func (o *MetricReportV141MetricValue) GetMetricDefinition() OdataV4IdRef {
	if o == nil || o.MetricDefinition == nil {
		var ret OdataV4IdRef
		return ret
	}
	return *o.MetricDefinition
}

// GetMetricDefinitionOk returns a tuple with the MetricDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricReportV141MetricValue) GetMetricDefinitionOk() (*OdataV4IdRef, bool) {
	if o == nil || o.MetricDefinition == nil {
		return nil, false
	}
	return o.MetricDefinition, true
}

// HasMetricDefinition returns a boolean if a field has been set.
func (o *MetricReportV141MetricValue) HasMetricDefinition() bool {
	if o != nil && o.MetricDefinition != nil {
		return true
	}

	return false
}

// SetMetricDefinition gets a reference to the given OdataV4IdRef and assigns it to the MetricDefinition field.
func (o *MetricReportV141MetricValue) SetMetricDefinition(v OdataV4IdRef) {
	o.MetricDefinition = &v
}

// GetMetricId returns the MetricId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetricReportV141MetricValue) GetMetricId() string {
	if o == nil || o.MetricId.Get() == nil {
		var ret string
		return ret
	}
	return *o.MetricId.Get()
}

// GetMetricIdOk returns a tuple with the MetricId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetricReportV141MetricValue) GetMetricIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MetricId.Get(), o.MetricId.IsSet()
}

// HasMetricId returns a boolean if a field has been set.
func (o *MetricReportV141MetricValue) HasMetricId() bool {
	if o != nil && o.MetricId.IsSet() {
		return true
	}

	return false
}

// SetMetricId gets a reference to the given NullableString and assigns it to the MetricId field.
func (o *MetricReportV141MetricValue) SetMetricId(v string) {
	o.MetricId.Set(&v)
}
// SetMetricIdNil sets the value for MetricId to be an explicit nil
func (o *MetricReportV141MetricValue) SetMetricIdNil() {
	o.MetricId.Set(nil)
}

// UnsetMetricId ensures that no value is present for MetricId, not even an explicit nil
func (o *MetricReportV141MetricValue) UnsetMetricId() {
	o.MetricId.Unset()
}

// GetMetricProperty returns the MetricProperty field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetricReportV141MetricValue) GetMetricProperty() string {
	if o == nil || o.MetricProperty.Get() == nil {
		var ret string
		return ret
	}
	return *o.MetricProperty.Get()
}

// GetMetricPropertyOk returns a tuple with the MetricProperty field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetricReportV141MetricValue) GetMetricPropertyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MetricProperty.Get(), o.MetricProperty.IsSet()
}

// HasMetricProperty returns a boolean if a field has been set.
func (o *MetricReportV141MetricValue) HasMetricProperty() bool {
	if o != nil && o.MetricProperty.IsSet() {
		return true
	}

	return false
}

// SetMetricProperty gets a reference to the given NullableString and assigns it to the MetricProperty field.
func (o *MetricReportV141MetricValue) SetMetricProperty(v string) {
	o.MetricProperty.Set(&v)
}
// SetMetricPropertyNil sets the value for MetricProperty to be an explicit nil
func (o *MetricReportV141MetricValue) SetMetricPropertyNil() {
	o.MetricProperty.Set(nil)
}

// UnsetMetricProperty ensures that no value is present for MetricProperty, not even an explicit nil
func (o *MetricReportV141MetricValue) UnsetMetricProperty() {
	o.MetricProperty.Unset()
}

// GetMetricValue returns the MetricValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetricReportV141MetricValue) GetMetricValue() string {
	if o == nil || o.MetricValue.Get() == nil {
		var ret string
		return ret
	}
	return *o.MetricValue.Get()
}

// GetMetricValueOk returns a tuple with the MetricValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetricReportV141MetricValue) GetMetricValueOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MetricValue.Get(), o.MetricValue.IsSet()
}

// HasMetricValue returns a boolean if a field has been set.
func (o *MetricReportV141MetricValue) HasMetricValue() bool {
	if o != nil && o.MetricValue.IsSet() {
		return true
	}

	return false
}

// SetMetricValue gets a reference to the given NullableString and assigns it to the MetricValue field.
func (o *MetricReportV141MetricValue) SetMetricValue(v string) {
	o.MetricValue.Set(&v)
}
// SetMetricValueNil sets the value for MetricValue to be an explicit nil
func (o *MetricReportV141MetricValue) SetMetricValueNil() {
	o.MetricValue.Set(nil)
}

// UnsetMetricValue ensures that no value is present for MetricValue, not even an explicit nil
func (o *MetricReportV141MetricValue) UnsetMetricValue() {
	o.MetricValue.Unset()
}

// GetOem returns the Oem field value if set, zero value otherwise.
func (o *MetricReportV141MetricValue) GetOem() map[string]map[string]interface{} {
	if o == nil || o.Oem == nil {
		var ret map[string]map[string]interface{}
		return ret
	}
	return *o.Oem
}

// GetOemOk returns a tuple with the Oem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricReportV141MetricValue) GetOemOk() (*map[string]map[string]interface{}, bool) {
	if o == nil || o.Oem == nil {
		return nil, false
	}
	return o.Oem, true
}

// HasOem returns a boolean if a field has been set.
func (o *MetricReportV141MetricValue) HasOem() bool {
	if o != nil && o.Oem != nil {
		return true
	}

	return false
}

// SetOem gets a reference to the given map[string]map[string]interface{} and assigns it to the Oem field.
func (o *MetricReportV141MetricValue) SetOem(v map[string]map[string]interface{}) {
	o.Oem = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetricReportV141MetricValue) GetTimestamp() time.Time {
	if o == nil || o.Timestamp.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.Timestamp.Get()
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetricReportV141MetricValue) GetTimestampOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Timestamp.Get(), o.Timestamp.IsSet()
}

// HasTimestamp returns a boolean if a field has been set.
func (o *MetricReportV141MetricValue) HasTimestamp() bool {
	if o != nil && o.Timestamp.IsSet() {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given NullableTime and assigns it to the Timestamp field.
func (o *MetricReportV141MetricValue) SetTimestamp(v time.Time) {
	o.Timestamp.Set(&v)
}
// SetTimestampNil sets the value for Timestamp to be an explicit nil
func (o *MetricReportV141MetricValue) SetTimestampNil() {
	o.Timestamp.Set(nil)
}

// UnsetTimestamp ensures that no value is present for Timestamp, not even an explicit nil
func (o *MetricReportV141MetricValue) UnsetTimestamp() {
	o.Timestamp.Unset()
}

func (o MetricReportV141MetricValue) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MetricDefinition != nil {
		toSerialize["MetricDefinition"] = o.MetricDefinition
	}
	if o.MetricId.IsSet() {
		toSerialize["MetricId"] = o.MetricId.Get()
	}
	if o.MetricProperty.IsSet() {
		toSerialize["MetricProperty"] = o.MetricProperty.Get()
	}
	if o.MetricValue.IsSet() {
		toSerialize["MetricValue"] = o.MetricValue.Get()
	}
	if o.Oem != nil {
		toSerialize["Oem"] = o.Oem
	}
	if o.Timestamp.IsSet() {
		toSerialize["Timestamp"] = o.Timestamp.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableMetricReportV141MetricValue struct {
	value *MetricReportV141MetricValue
	isSet bool
}

func (v NullableMetricReportV141MetricValue) Get() *MetricReportV141MetricValue {
	return v.value
}

func (v *NullableMetricReportV141MetricValue) Set(val *MetricReportV141MetricValue) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricReportV141MetricValue) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricReportV141MetricValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricReportV141MetricValue(val *MetricReportV141MetricValue) *NullableMetricReportV141MetricValue {
	return &NullableMetricReportV141MetricValue{value: val, isSet: true}
}

func (v NullableMetricReportV141MetricValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricReportV141MetricValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


