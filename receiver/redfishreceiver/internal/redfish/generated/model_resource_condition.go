/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2020.4
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package redfish

import (
	"encoding/json"
	"time"
)

// ResourceCondition A condition that requires attention.
type ResourceCondition struct {
	LogEntry *OdataV4IdRef `json:"LogEntry,omitempty"`
	// The human-readable message for this condition.
	Message *string `json:"Message,omitempty"`
	// An array of message arguments that are substituted for the arguments in the message when looked up in the message registry.
	MessageArgs *[]string `json:"MessageArgs,omitempty"`
	// The identifier for the message.
	MessageId string `json:"MessageId"`
	OriginOfCondition *OdataV4IdRef `json:"OriginOfCondition,omitempty"`
	Severity *ResourceHealth `json:"Severity,omitempty"`
	// The time the condition occurred.
	Timestamp *time.Time `json:"Timestamp,omitempty"`
}

// NewResourceCondition instantiates a new ResourceCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceCondition(messageId string, ) *ResourceCondition {
	this := ResourceCondition{}
	this.MessageId = messageId
	return &this
}

// NewResourceConditionWithDefaults instantiates a new ResourceCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceConditionWithDefaults() *ResourceCondition {
	this := ResourceCondition{}
	return &this
}

// GetLogEntry returns the LogEntry field value if set, zero value otherwise.
func (o *ResourceCondition) GetLogEntry() OdataV4IdRef {
	if o == nil || o.LogEntry == nil {
		var ret OdataV4IdRef
		return ret
	}
	return *o.LogEntry
}

// GetLogEntryOk returns a tuple with the LogEntry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceCondition) GetLogEntryOk() (*OdataV4IdRef, bool) {
	if o == nil || o.LogEntry == nil {
		return nil, false
	}
	return o.LogEntry, true
}

// HasLogEntry returns a boolean if a field has been set.
func (o *ResourceCondition) HasLogEntry() bool {
	if o != nil && o.LogEntry != nil {
		return true
	}

	return false
}

// SetLogEntry gets a reference to the given OdataV4IdRef and assigns it to the LogEntry field.
func (o *ResourceCondition) SetLogEntry(v OdataV4IdRef) {
	o.LogEntry = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ResourceCondition) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceCondition) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ResourceCondition) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ResourceCondition) SetMessage(v string) {
	o.Message = &v
}

// GetMessageArgs returns the MessageArgs field value if set, zero value otherwise.
func (o *ResourceCondition) GetMessageArgs() []string {
	if o == nil || o.MessageArgs == nil {
		var ret []string
		return ret
	}
	return *o.MessageArgs
}

// GetMessageArgsOk returns a tuple with the MessageArgs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceCondition) GetMessageArgsOk() (*[]string, bool) {
	if o == nil || o.MessageArgs == nil {
		return nil, false
	}
	return o.MessageArgs, true
}

// HasMessageArgs returns a boolean if a field has been set.
func (o *ResourceCondition) HasMessageArgs() bool {
	if o != nil && o.MessageArgs != nil {
		return true
	}

	return false
}

// SetMessageArgs gets a reference to the given []string and assigns it to the MessageArgs field.
func (o *ResourceCondition) SetMessageArgs(v []string) {
	o.MessageArgs = &v
}

// GetMessageId returns the MessageId field value
func (o *ResourceCondition) GetMessageId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.MessageId
}

// GetMessageIdOk returns a tuple with the MessageId field value
// and a boolean to check if the value has been set.
func (o *ResourceCondition) GetMessageIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MessageId, true
}

// SetMessageId sets field value
func (o *ResourceCondition) SetMessageId(v string) {
	o.MessageId = v
}

// GetOriginOfCondition returns the OriginOfCondition field value if set, zero value otherwise.
func (o *ResourceCondition) GetOriginOfCondition() OdataV4IdRef {
	if o == nil || o.OriginOfCondition == nil {
		var ret OdataV4IdRef
		return ret
	}
	return *o.OriginOfCondition
}

// GetOriginOfConditionOk returns a tuple with the OriginOfCondition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceCondition) GetOriginOfConditionOk() (*OdataV4IdRef, bool) {
	if o == nil || o.OriginOfCondition == nil {
		return nil, false
	}
	return o.OriginOfCondition, true
}

// HasOriginOfCondition returns a boolean if a field has been set.
func (o *ResourceCondition) HasOriginOfCondition() bool {
	if o != nil && o.OriginOfCondition != nil {
		return true
	}

	return false
}

// SetOriginOfCondition gets a reference to the given OdataV4IdRef and assigns it to the OriginOfCondition field.
func (o *ResourceCondition) SetOriginOfCondition(v OdataV4IdRef) {
	o.OriginOfCondition = &v
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *ResourceCondition) GetSeverity() ResourceHealth {
	if o == nil || o.Severity == nil {
		var ret ResourceHealth
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceCondition) GetSeverityOk() (*ResourceHealth, bool) {
	if o == nil || o.Severity == nil {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *ResourceCondition) HasSeverity() bool {
	if o != nil && o.Severity != nil {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given ResourceHealth and assigns it to the Severity field.
func (o *ResourceCondition) SetSeverity(v ResourceHealth) {
	o.Severity = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *ResourceCondition) GetTimestamp() time.Time {
	if o == nil || o.Timestamp == nil {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceCondition) GetTimestampOk() (*time.Time, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *ResourceCondition) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *ResourceCondition) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

func (o ResourceCondition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LogEntry != nil {
		toSerialize["LogEntry"] = o.LogEntry
	}
	if o.Message != nil {
		toSerialize["Message"] = o.Message
	}
	if o.MessageArgs != nil {
		toSerialize["MessageArgs"] = o.MessageArgs
	}
	if true {
		toSerialize["MessageId"] = o.MessageId
	}
	if o.OriginOfCondition != nil {
		toSerialize["OriginOfCondition"] = o.OriginOfCondition
	}
	if o.Severity != nil {
		toSerialize["Severity"] = o.Severity
	}
	if o.Timestamp != nil {
		toSerialize["Timestamp"] = o.Timestamp
	}
	return json.Marshal(toSerialize)
}

type NullableResourceCondition struct {
	value *ResourceCondition
	isSet bool
}

func (v NullableResourceCondition) Get() *ResourceCondition {
	return v.value
}

func (v *NullableResourceCondition) Set(val *ResourceCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceCondition(val *ResourceCondition) *NullableResourceCondition {
	return &NullableResourceCondition{value: val, isSet: true}
}

func (v NullableResourceCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


