/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2020.4
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package redfish

import (
	"encoding/json"
	"fmt"
)

// ResourceHealth the model 'ResourceHealth'
type ResourceHealth string

// List of Resource_Health
const (
	RESOURCEHEALTH_OK ResourceHealth = "OK"
	RESOURCEHEALTH_WARNING ResourceHealth = "Warning"
	RESOURCEHEALTH_CRITICAL ResourceHealth = "Critical"
)

func (v *ResourceHealth) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ResourceHealth(value)
	for _, existing := range []ResourceHealth{ "OK", "Warning", "Critical",   } {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ResourceHealth", value)
}

// Ptr returns reference to Resource_Health value
func (v ResourceHealth) Ptr() *ResourceHealth {
	return &v
}

type NullableResourceHealth struct {
	value *ResourceHealth
	isSet bool
}

func (v NullableResourceHealth) Get() *ResourceHealth {
	return v.value
}

func (v *NullableResourceHealth) Set(val *ResourceHealth) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceHealth) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceHealth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceHealth(val *ResourceHealth) *NullableResourceHealth {
	return &NullableResourceHealth{value: val, isSet: true}
}

func (v NullableResourceHealth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceHealth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

