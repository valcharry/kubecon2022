/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2020.4
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package redfish

import (
	"encoding/json"
	"fmt"
)

// ScheduleSchedule Schedules a series of occurrences.
type ScheduleSchedule struct {
	ScheduleV101Schedule *ScheduleV101Schedule
	ScheduleV112Schedule *ScheduleV112Schedule
	ScheduleV122Schedule *ScheduleV122Schedule
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *ScheduleSchedule) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into ScheduleV101Schedule
	err = json.Unmarshal(data, &dst.ScheduleV101Schedule);
	if err == nil {
		jsonScheduleV101Schedule, _ := json.Marshal(dst.ScheduleV101Schedule)
		if string(jsonScheduleV101Schedule) == "{}" { // empty struct
			dst.ScheduleV101Schedule = nil
		} else {
			return nil // data stored in dst.ScheduleV101Schedule, return on the first match
		}
	} else {
		dst.ScheduleV101Schedule = nil
	}

	// try to unmarshal JSON data into ScheduleV112Schedule
	err = json.Unmarshal(data, &dst.ScheduleV112Schedule);
	if err == nil {
		jsonScheduleV112Schedule, _ := json.Marshal(dst.ScheduleV112Schedule)
		if string(jsonScheduleV112Schedule) == "{}" { // empty struct
			dst.ScheduleV112Schedule = nil
		} else {
			return nil // data stored in dst.ScheduleV112Schedule, return on the first match
		}
	} else {
		dst.ScheduleV112Schedule = nil
	}

	// try to unmarshal JSON data into ScheduleV122Schedule
	err = json.Unmarshal(data, &dst.ScheduleV122Schedule);
	if err == nil {
		jsonScheduleV122Schedule, _ := json.Marshal(dst.ScheduleV122Schedule)
		if string(jsonScheduleV122Schedule) == "{}" { // empty struct
			dst.ScheduleV122Schedule = nil
		} else {
			return nil // data stored in dst.ScheduleV122Schedule, return on the first match
		}
	} else {
		dst.ScheduleV122Schedule = nil
	}

	return fmt.Errorf("Data failed to match schemas in anyOf(ScheduleSchedule)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *ScheduleSchedule) MarshalJSON() ([]byte, error) {
	if src.ScheduleV101Schedule != nil {
		return json.Marshal(&src.ScheduleV101Schedule)
	}

	if src.ScheduleV112Schedule != nil {
		return json.Marshal(&src.ScheduleV112Schedule)
	}

	if src.ScheduleV122Schedule != nil {
		return json.Marshal(&src.ScheduleV122Schedule)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableScheduleSchedule struct {
	value *ScheduleSchedule
	isSet bool
}

func (v NullableScheduleSchedule) Get() *ScheduleSchedule {
	return v.value
}

func (v *NullableScheduleSchedule) Set(val *ScheduleSchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduleSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduleSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduleSchedule(val *ScheduleSchedule) *NullableScheduleSchedule {
	return &NullableScheduleSchedule{value: val, isSet: true}
}

func (v NullableScheduleSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduleSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


