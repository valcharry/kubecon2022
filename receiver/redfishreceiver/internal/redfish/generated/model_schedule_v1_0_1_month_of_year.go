/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2020.4
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package redfish

import (
	"encoding/json"
	"fmt"
)

// ScheduleV101MonthOfYear Months of the year.
type ScheduleV101MonthOfYear string

// List of Schedule_v1_0_1_MonthOfYear
const (
	SCHEDULEV101MONTHOFYEAR_JANUARY ScheduleV101MonthOfYear = "January"
	SCHEDULEV101MONTHOFYEAR_FEBRUARY ScheduleV101MonthOfYear = "February"
	SCHEDULEV101MONTHOFYEAR_MARCH ScheduleV101MonthOfYear = "March"
	SCHEDULEV101MONTHOFYEAR_APRIL ScheduleV101MonthOfYear = "April"
	SCHEDULEV101MONTHOFYEAR_MAY ScheduleV101MonthOfYear = "May"
	SCHEDULEV101MONTHOFYEAR_JUNE ScheduleV101MonthOfYear = "June"
	SCHEDULEV101MONTHOFYEAR_JULY ScheduleV101MonthOfYear = "July"
	SCHEDULEV101MONTHOFYEAR_AUGUST ScheduleV101MonthOfYear = "August"
	SCHEDULEV101MONTHOFYEAR_SEPTEMBER ScheduleV101MonthOfYear = "September"
	SCHEDULEV101MONTHOFYEAR_OCTOBER ScheduleV101MonthOfYear = "October"
	SCHEDULEV101MONTHOFYEAR_NOVEMBER ScheduleV101MonthOfYear = "November"
	SCHEDULEV101MONTHOFYEAR_DECEMBER ScheduleV101MonthOfYear = "December"
	SCHEDULEV101MONTHOFYEAR_EVERY ScheduleV101MonthOfYear = "Every"
)

func (v *ScheduleV101MonthOfYear) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ScheduleV101MonthOfYear(value)
	for _, existing := range []ScheduleV101MonthOfYear{ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", "Every",   } {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ScheduleV101MonthOfYear", value)
}

// Ptr returns reference to Schedule_v1_0_1_MonthOfYear value
func (v ScheduleV101MonthOfYear) Ptr() *ScheduleV101MonthOfYear {
	return &v
}

type NullableScheduleV101MonthOfYear struct {
	value *ScheduleV101MonthOfYear
	isSet bool
}

func (v NullableScheduleV101MonthOfYear) Get() *ScheduleV101MonthOfYear {
	return v.value
}

func (v *NullableScheduleV101MonthOfYear) Set(val *ScheduleV101MonthOfYear) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduleV101MonthOfYear) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduleV101MonthOfYear) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduleV101MonthOfYear(val *ScheduleV101MonthOfYear) *NullableScheduleV101MonthOfYear {
	return &NullableScheduleV101MonthOfYear{value: val, isSet: true}
}

func (v NullableScheduleV101MonthOfYear) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduleV101MonthOfYear) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

