/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2020.4
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package redfish

import (
	"encoding/json"
	"fmt"
)

// ScheduleV112DayOfWeek Days of the week.
type ScheduleV112DayOfWeek string

// List of Schedule_v1_1_2_DayOfWeek
const (
	SCHEDULEV112DAYOFWEEK_MONDAY ScheduleV112DayOfWeek = "Monday"
	SCHEDULEV112DAYOFWEEK_TUESDAY ScheduleV112DayOfWeek = "Tuesday"
	SCHEDULEV112DAYOFWEEK_WEDNESDAY ScheduleV112DayOfWeek = "Wednesday"
	SCHEDULEV112DAYOFWEEK_THURSDAY ScheduleV112DayOfWeek = "Thursday"
	SCHEDULEV112DAYOFWEEK_FRIDAY ScheduleV112DayOfWeek = "Friday"
	SCHEDULEV112DAYOFWEEK_SATURDAY ScheduleV112DayOfWeek = "Saturday"
	SCHEDULEV112DAYOFWEEK_SUNDAY ScheduleV112DayOfWeek = "Sunday"
	SCHEDULEV112DAYOFWEEK_EVERY ScheduleV112DayOfWeek = "Every"
)

func (v *ScheduleV112DayOfWeek) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ScheduleV112DayOfWeek(value)
	for _, existing := range []ScheduleV112DayOfWeek{ "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday", "Every",   } {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ScheduleV112DayOfWeek", value)
}

// Ptr returns reference to Schedule_v1_1_2_DayOfWeek value
func (v ScheduleV112DayOfWeek) Ptr() *ScheduleV112DayOfWeek {
	return &v
}

type NullableScheduleV112DayOfWeek struct {
	value *ScheduleV112DayOfWeek
	isSet bool
}

func (v NullableScheduleV112DayOfWeek) Get() *ScheduleV112DayOfWeek {
	return v.value
}

func (v *NullableScheduleV112DayOfWeek) Set(val *ScheduleV112DayOfWeek) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduleV112DayOfWeek) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduleV112DayOfWeek) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduleV112DayOfWeek(val *ScheduleV112DayOfWeek) *NullableScheduleV112DayOfWeek {
	return &NullableScheduleV112DayOfWeek{value: val, isSet: true}
}

func (v NullableScheduleV112DayOfWeek) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduleV112DayOfWeek) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

