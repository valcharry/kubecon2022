/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2020.4
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package redfish

import (
	"encoding/json"
	"fmt"
)

// ScheduleV112MonthOfYear Months of the year.
type ScheduleV112MonthOfYear string

// List of Schedule_v1_1_2_MonthOfYear
const (
	SCHEDULEV112MONTHOFYEAR_JANUARY ScheduleV112MonthOfYear = "January"
	SCHEDULEV112MONTHOFYEAR_FEBRUARY ScheduleV112MonthOfYear = "February"
	SCHEDULEV112MONTHOFYEAR_MARCH ScheduleV112MonthOfYear = "March"
	SCHEDULEV112MONTHOFYEAR_APRIL ScheduleV112MonthOfYear = "April"
	SCHEDULEV112MONTHOFYEAR_MAY ScheduleV112MonthOfYear = "May"
	SCHEDULEV112MONTHOFYEAR_JUNE ScheduleV112MonthOfYear = "June"
	SCHEDULEV112MONTHOFYEAR_JULY ScheduleV112MonthOfYear = "July"
	SCHEDULEV112MONTHOFYEAR_AUGUST ScheduleV112MonthOfYear = "August"
	SCHEDULEV112MONTHOFYEAR_SEPTEMBER ScheduleV112MonthOfYear = "September"
	SCHEDULEV112MONTHOFYEAR_OCTOBER ScheduleV112MonthOfYear = "October"
	SCHEDULEV112MONTHOFYEAR_NOVEMBER ScheduleV112MonthOfYear = "November"
	SCHEDULEV112MONTHOFYEAR_DECEMBER ScheduleV112MonthOfYear = "December"
	SCHEDULEV112MONTHOFYEAR_EVERY ScheduleV112MonthOfYear = "Every"
)

func (v *ScheduleV112MonthOfYear) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ScheduleV112MonthOfYear(value)
	for _, existing := range []ScheduleV112MonthOfYear{ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", "Every",   } {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ScheduleV112MonthOfYear", value)
}

// Ptr returns reference to Schedule_v1_1_2_MonthOfYear value
func (v ScheduleV112MonthOfYear) Ptr() *ScheduleV112MonthOfYear {
	return &v
}

type NullableScheduleV112MonthOfYear struct {
	value *ScheduleV112MonthOfYear
	isSet bool
}

func (v NullableScheduleV112MonthOfYear) Get() *ScheduleV112MonthOfYear {
	return v.value
}

func (v *NullableScheduleV112MonthOfYear) Set(val *ScheduleV112MonthOfYear) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduleV112MonthOfYear) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduleV112MonthOfYear) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduleV112MonthOfYear(val *ScheduleV112MonthOfYear) *NullableScheduleV112MonthOfYear {
	return &NullableScheduleV112MonthOfYear{value: val, isSet: true}
}

func (v NullableScheduleV112MonthOfYear) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduleV112MonthOfYear) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

