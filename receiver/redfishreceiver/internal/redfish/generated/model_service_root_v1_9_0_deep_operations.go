/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2020.4
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package redfish

import (
	"encoding/json"
)

// ServiceRootV190DeepOperations The information about deep operations that the service supports.
type ServiceRootV190DeepOperations struct {
	// An indication of whether the service supports the deep PATCH operation.
	DeepPATCH *bool `json:"DeepPATCH,omitempty"`
	// An indication of whether the service supports the deep POST operation.
	DeepPOST *bool `json:"DeepPOST,omitempty"`
	// The maximum levels of resources allowed in deep operations.
	MaxLevels *int64 `json:"MaxLevels,omitempty"`
}

// NewServiceRootV190DeepOperations instantiates a new ServiceRootV190DeepOperations object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceRootV190DeepOperations() *ServiceRootV190DeepOperations {
	this := ServiceRootV190DeepOperations{}
	return &this
}

// NewServiceRootV190DeepOperationsWithDefaults instantiates a new ServiceRootV190DeepOperations object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceRootV190DeepOperationsWithDefaults() *ServiceRootV190DeepOperations {
	this := ServiceRootV190DeepOperations{}
	return &this
}

// GetDeepPATCH returns the DeepPATCH field value if set, zero value otherwise.
func (o *ServiceRootV190DeepOperations) GetDeepPATCH() bool {
	if o == nil || o.DeepPATCH == nil {
		var ret bool
		return ret
	}
	return *o.DeepPATCH
}

// GetDeepPATCHOk returns a tuple with the DeepPATCH field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceRootV190DeepOperations) GetDeepPATCHOk() (*bool, bool) {
	if o == nil || o.DeepPATCH == nil {
		return nil, false
	}
	return o.DeepPATCH, true
}

// HasDeepPATCH returns a boolean if a field has been set.
func (o *ServiceRootV190DeepOperations) HasDeepPATCH() bool {
	if o != nil && o.DeepPATCH != nil {
		return true
	}

	return false
}

// SetDeepPATCH gets a reference to the given bool and assigns it to the DeepPATCH field.
func (o *ServiceRootV190DeepOperations) SetDeepPATCH(v bool) {
	o.DeepPATCH = &v
}

// GetDeepPOST returns the DeepPOST field value if set, zero value otherwise.
func (o *ServiceRootV190DeepOperations) GetDeepPOST() bool {
	if o == nil || o.DeepPOST == nil {
		var ret bool
		return ret
	}
	return *o.DeepPOST
}

// GetDeepPOSTOk returns a tuple with the DeepPOST field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceRootV190DeepOperations) GetDeepPOSTOk() (*bool, bool) {
	if o == nil || o.DeepPOST == nil {
		return nil, false
	}
	return o.DeepPOST, true
}

// HasDeepPOST returns a boolean if a field has been set.
func (o *ServiceRootV190DeepOperations) HasDeepPOST() bool {
	if o != nil && o.DeepPOST != nil {
		return true
	}

	return false
}

// SetDeepPOST gets a reference to the given bool and assigns it to the DeepPOST field.
func (o *ServiceRootV190DeepOperations) SetDeepPOST(v bool) {
	o.DeepPOST = &v
}

// GetMaxLevels returns the MaxLevels field value if set, zero value otherwise.
func (o *ServiceRootV190DeepOperations) GetMaxLevels() int64 {
	if o == nil || o.MaxLevels == nil {
		var ret int64
		return ret
	}
	return *o.MaxLevels
}

// GetMaxLevelsOk returns a tuple with the MaxLevels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceRootV190DeepOperations) GetMaxLevelsOk() (*int64, bool) {
	if o == nil || o.MaxLevels == nil {
		return nil, false
	}
	return o.MaxLevels, true
}

// HasMaxLevels returns a boolean if a field has been set.
func (o *ServiceRootV190DeepOperations) HasMaxLevels() bool {
	if o != nil && o.MaxLevels != nil {
		return true
	}

	return false
}

// SetMaxLevels gets a reference to the given int64 and assigns it to the MaxLevels field.
func (o *ServiceRootV190DeepOperations) SetMaxLevels(v int64) {
	o.MaxLevels = &v
}

func (o ServiceRootV190DeepOperations) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DeepPATCH != nil {
		toSerialize["DeepPATCH"] = o.DeepPATCH
	}
	if o.DeepPOST != nil {
		toSerialize["DeepPOST"] = o.DeepPOST
	}
	if o.MaxLevels != nil {
		toSerialize["MaxLevels"] = o.MaxLevels
	}
	return json.Marshal(toSerialize)
}

type NullableServiceRootV190DeepOperations struct {
	value *ServiceRootV190DeepOperations
	isSet bool
}

func (v NullableServiceRootV190DeepOperations) Get() *ServiceRootV190DeepOperations {
	return v.value
}

func (v *NullableServiceRootV190DeepOperations) Set(val *ServiceRootV190DeepOperations) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceRootV190DeepOperations) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceRootV190DeepOperations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceRootV190DeepOperations(val *ServiceRootV190DeepOperations) *NullableServiceRootV190DeepOperations {
	return &NullableServiceRootV190DeepOperations{value: val, isSet: true}
}

func (v NullableServiceRootV190DeepOperations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceRootV190DeepOperations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


