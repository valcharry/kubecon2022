/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2020.4
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package redfish

import (
	"encoding/json"
)

// ServiceRootV190ProtocolFeaturesSupported The information about protocol features that the service supports.
type ServiceRootV190ProtocolFeaturesSupported struct {
	DeepOperations *ServiceRootV190DeepOperations `json:"DeepOperations,omitempty"`
	// An indication of whether the service supports the excerpt query parameter.
	ExcerptQuery *bool `json:"ExcerptQuery,omitempty"`
	ExpandQuery *ServiceRootV190Expand `json:"ExpandQuery,omitempty"`
	// An indication of whether the service supports the $filter query parameter.
	FilterQuery *bool `json:"FilterQuery,omitempty"`
	// An indication of whether the service supports the only query parameter.
	OnlyMemberQuery *bool `json:"OnlyMemberQuery,omitempty"`
	// An indication of whether the service supports the $select query parameter.
	SelectQuery *bool `json:"SelectQuery,omitempty"`
}

// NewServiceRootV190ProtocolFeaturesSupported instantiates a new ServiceRootV190ProtocolFeaturesSupported object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceRootV190ProtocolFeaturesSupported() *ServiceRootV190ProtocolFeaturesSupported {
	this := ServiceRootV190ProtocolFeaturesSupported{}
	return &this
}

// NewServiceRootV190ProtocolFeaturesSupportedWithDefaults instantiates a new ServiceRootV190ProtocolFeaturesSupported object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceRootV190ProtocolFeaturesSupportedWithDefaults() *ServiceRootV190ProtocolFeaturesSupported {
	this := ServiceRootV190ProtocolFeaturesSupported{}
	return &this
}

// GetDeepOperations returns the DeepOperations field value if set, zero value otherwise.
func (o *ServiceRootV190ProtocolFeaturesSupported) GetDeepOperations() ServiceRootV190DeepOperations {
	if o == nil || o.DeepOperations == nil {
		var ret ServiceRootV190DeepOperations
		return ret
	}
	return *o.DeepOperations
}

// GetDeepOperationsOk returns a tuple with the DeepOperations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceRootV190ProtocolFeaturesSupported) GetDeepOperationsOk() (*ServiceRootV190DeepOperations, bool) {
	if o == nil || o.DeepOperations == nil {
		return nil, false
	}
	return o.DeepOperations, true
}

// HasDeepOperations returns a boolean if a field has been set.
func (o *ServiceRootV190ProtocolFeaturesSupported) HasDeepOperations() bool {
	if o != nil && o.DeepOperations != nil {
		return true
	}

	return false
}

// SetDeepOperations gets a reference to the given ServiceRootV190DeepOperations and assigns it to the DeepOperations field.
func (o *ServiceRootV190ProtocolFeaturesSupported) SetDeepOperations(v ServiceRootV190DeepOperations) {
	o.DeepOperations = &v
}

// GetExcerptQuery returns the ExcerptQuery field value if set, zero value otherwise.
func (o *ServiceRootV190ProtocolFeaturesSupported) GetExcerptQuery() bool {
	if o == nil || o.ExcerptQuery == nil {
		var ret bool
		return ret
	}
	return *o.ExcerptQuery
}

// GetExcerptQueryOk returns a tuple with the ExcerptQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceRootV190ProtocolFeaturesSupported) GetExcerptQueryOk() (*bool, bool) {
	if o == nil || o.ExcerptQuery == nil {
		return nil, false
	}
	return o.ExcerptQuery, true
}

// HasExcerptQuery returns a boolean if a field has been set.
func (o *ServiceRootV190ProtocolFeaturesSupported) HasExcerptQuery() bool {
	if o != nil && o.ExcerptQuery != nil {
		return true
	}

	return false
}

// SetExcerptQuery gets a reference to the given bool and assigns it to the ExcerptQuery field.
func (o *ServiceRootV190ProtocolFeaturesSupported) SetExcerptQuery(v bool) {
	o.ExcerptQuery = &v
}

// GetExpandQuery returns the ExpandQuery field value if set, zero value otherwise.
func (o *ServiceRootV190ProtocolFeaturesSupported) GetExpandQuery() ServiceRootV190Expand {
	if o == nil || o.ExpandQuery == nil {
		var ret ServiceRootV190Expand
		return ret
	}
	return *o.ExpandQuery
}

// GetExpandQueryOk returns a tuple with the ExpandQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceRootV190ProtocolFeaturesSupported) GetExpandQueryOk() (*ServiceRootV190Expand, bool) {
	if o == nil || o.ExpandQuery == nil {
		return nil, false
	}
	return o.ExpandQuery, true
}

// HasExpandQuery returns a boolean if a field has been set.
func (o *ServiceRootV190ProtocolFeaturesSupported) HasExpandQuery() bool {
	if o != nil && o.ExpandQuery != nil {
		return true
	}

	return false
}

// SetExpandQuery gets a reference to the given ServiceRootV190Expand and assigns it to the ExpandQuery field.
func (o *ServiceRootV190ProtocolFeaturesSupported) SetExpandQuery(v ServiceRootV190Expand) {
	o.ExpandQuery = &v
}

// GetFilterQuery returns the FilterQuery field value if set, zero value otherwise.
func (o *ServiceRootV190ProtocolFeaturesSupported) GetFilterQuery() bool {
	if o == nil || o.FilterQuery == nil {
		var ret bool
		return ret
	}
	return *o.FilterQuery
}

// GetFilterQueryOk returns a tuple with the FilterQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceRootV190ProtocolFeaturesSupported) GetFilterQueryOk() (*bool, bool) {
	if o == nil || o.FilterQuery == nil {
		return nil, false
	}
	return o.FilterQuery, true
}

// HasFilterQuery returns a boolean if a field has been set.
func (o *ServiceRootV190ProtocolFeaturesSupported) HasFilterQuery() bool {
	if o != nil && o.FilterQuery != nil {
		return true
	}

	return false
}

// SetFilterQuery gets a reference to the given bool and assigns it to the FilterQuery field.
func (o *ServiceRootV190ProtocolFeaturesSupported) SetFilterQuery(v bool) {
	o.FilterQuery = &v
}

// GetOnlyMemberQuery returns the OnlyMemberQuery field value if set, zero value otherwise.
func (o *ServiceRootV190ProtocolFeaturesSupported) GetOnlyMemberQuery() bool {
	if o == nil || o.OnlyMemberQuery == nil {
		var ret bool
		return ret
	}
	return *o.OnlyMemberQuery
}

// GetOnlyMemberQueryOk returns a tuple with the OnlyMemberQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceRootV190ProtocolFeaturesSupported) GetOnlyMemberQueryOk() (*bool, bool) {
	if o == nil || o.OnlyMemberQuery == nil {
		return nil, false
	}
	return o.OnlyMemberQuery, true
}

// HasOnlyMemberQuery returns a boolean if a field has been set.
func (o *ServiceRootV190ProtocolFeaturesSupported) HasOnlyMemberQuery() bool {
	if o != nil && o.OnlyMemberQuery != nil {
		return true
	}

	return false
}

// SetOnlyMemberQuery gets a reference to the given bool and assigns it to the OnlyMemberQuery field.
func (o *ServiceRootV190ProtocolFeaturesSupported) SetOnlyMemberQuery(v bool) {
	o.OnlyMemberQuery = &v
}

// GetSelectQuery returns the SelectQuery field value if set, zero value otherwise.
func (o *ServiceRootV190ProtocolFeaturesSupported) GetSelectQuery() bool {
	if o == nil || o.SelectQuery == nil {
		var ret bool
		return ret
	}
	return *o.SelectQuery
}

// GetSelectQueryOk returns a tuple with the SelectQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceRootV190ProtocolFeaturesSupported) GetSelectQueryOk() (*bool, bool) {
	if o == nil || o.SelectQuery == nil {
		return nil, false
	}
	return o.SelectQuery, true
}

// HasSelectQuery returns a boolean if a field has been set.
func (o *ServiceRootV190ProtocolFeaturesSupported) HasSelectQuery() bool {
	if o != nil && o.SelectQuery != nil {
		return true
	}

	return false
}

// SetSelectQuery gets a reference to the given bool and assigns it to the SelectQuery field.
func (o *ServiceRootV190ProtocolFeaturesSupported) SetSelectQuery(v bool) {
	o.SelectQuery = &v
}

func (o ServiceRootV190ProtocolFeaturesSupported) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DeepOperations != nil {
		toSerialize["DeepOperations"] = o.DeepOperations
	}
	if o.ExcerptQuery != nil {
		toSerialize["ExcerptQuery"] = o.ExcerptQuery
	}
	if o.ExpandQuery != nil {
		toSerialize["ExpandQuery"] = o.ExpandQuery
	}
	if o.FilterQuery != nil {
		toSerialize["FilterQuery"] = o.FilterQuery
	}
	if o.OnlyMemberQuery != nil {
		toSerialize["OnlyMemberQuery"] = o.OnlyMemberQuery
	}
	if o.SelectQuery != nil {
		toSerialize["SelectQuery"] = o.SelectQuery
	}
	return json.Marshal(toSerialize)
}

type NullableServiceRootV190ProtocolFeaturesSupported struct {
	value *ServiceRootV190ProtocolFeaturesSupported
	isSet bool
}

func (v NullableServiceRootV190ProtocolFeaturesSupported) Get() *ServiceRootV190ProtocolFeaturesSupported {
	return v.value
}

func (v *NullableServiceRootV190ProtocolFeaturesSupported) Set(val *ServiceRootV190ProtocolFeaturesSupported) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceRootV190ProtocolFeaturesSupported) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceRootV190ProtocolFeaturesSupported) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceRootV190ProtocolFeaturesSupported(val *ServiceRootV190ProtocolFeaturesSupported) *NullableServiceRootV190ProtocolFeaturesSupported {
	return &NullableServiceRootV190ProtocolFeaturesSupported{value: val, isSet: true}
}

func (v NullableServiceRootV190ProtocolFeaturesSupported) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceRootV190ProtocolFeaturesSupported) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


